{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Unit3_L1_ClassNotes.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sheli90610/Data-Analytics/blob/main/Unit3_L1_ClassNotes.ipynb/python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NWtMPzWIMriY"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQDaCXnqYKCg"
      },
      "source": [
        "faithful_df = pd.read_csv('https://raw.githubusercontent.com/CunyLaguardiaDataAnalytics/datasets/master/faithful.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KUrPYwTgbwUm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "42f08807-64c4-43f2-9cb7-e15564a64fb4"
      },
      "source": [
        "type(faithful_df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UcgejpfcbLWK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "74efb636-36d6-41fc-b441-28271d3a1eb8"
      },
      "source": [
        "faithful_df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(272, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y_LqXySIbSJ-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "13bf6b4e-5bd5-46f6-b941-42c62cd1b5a0"
      },
      "source": [
        "faithful_df.columns"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Unnamed: 0', 'eruptions', 'waiting'], dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NAkuyrcohZZr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "d13f4174-97c2-4c38-eac1-f0f76414e8ad"
      },
      "source": [
        "faithful_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3.600</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1.800</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3.333</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2.283</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>4.533</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Unnamed: 0  eruptions  waiting\n",
              "0           1      3.600       79\n",
              "1           2      1.800       54\n",
              "2           3      3.333       74\n",
              "3           4      2.283       62\n",
              "4           5      4.533       85"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g_aKwANDhgBf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 662
        },
        "outputId": "db5daff2-7cff-429a-a6f5-64f5ecf052cf"
      },
      "source": [
        "faithful_df.head(20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3.600</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1.800</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3.333</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2.283</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>4.533</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>2.883</td>\n",
              "      <td>55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>4.700</td>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>3.600</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>1.950</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>4.350</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>1.833</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>12</td>\n",
              "      <td>3.917</td>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>13</td>\n",
              "      <td>4.200</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>14</td>\n",
              "      <td>1.750</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>15</td>\n",
              "      <td>4.700</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>16</td>\n",
              "      <td>2.167</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>17</td>\n",
              "      <td>1.750</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>18</td>\n",
              "      <td>4.800</td>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>19</td>\n",
              "      <td>1.600</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>20</td>\n",
              "      <td>4.250</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Unnamed: 0  eruptions  waiting\n",
              "0            1      3.600       79\n",
              "1            2      1.800       54\n",
              "2            3      3.333       74\n",
              "3            4      2.283       62\n",
              "4            5      4.533       85\n",
              "5            6      2.883       55\n",
              "6            7      4.700       88\n",
              "7            8      3.600       85\n",
              "8            9      1.950       51\n",
              "9           10      4.350       85\n",
              "10          11      1.833       54\n",
              "11          12      3.917       84\n",
              "12          13      4.200       78\n",
              "13          14      1.750       47\n",
              "14          15      4.700       83\n",
              "15          16      2.167       52\n",
              "16          17      1.750       62\n",
              "17          18      4.800       84\n",
              "18          19      1.600       52\n",
              "19          20      4.250       79"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uce1Op7qh6kk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "03b7030d-3503-4f6b-fa75-bcc522d8c1e7"
      },
      "source": [
        "faithful_df.tail()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>267</th>\n",
              "      <td>268</td>\n",
              "      <td>4.117</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>268</th>\n",
              "      <td>269</td>\n",
              "      <td>2.150</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>269</th>\n",
              "      <td>270</td>\n",
              "      <td>4.417</td>\n",
              "      <td>90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>271</td>\n",
              "      <td>1.817</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>271</th>\n",
              "      <td>272</td>\n",
              "      <td>4.467</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Unnamed: 0  eruptions  waiting\n",
              "267         268      4.117       81\n",
              "268         269      2.150       46\n",
              "269         270      4.417       90\n",
              "270         271      1.817       46\n",
              "271         272      4.467       74"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9SoHRuFAiDJL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "outputId": "6dad3a99-b1d6-426d-b5b5-8ba8ceda4bcb"
      },
      "source": [
        "faithful_df.tail(10)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>262</th>\n",
              "      <td>263</td>\n",
              "      <td>1.850</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>264</td>\n",
              "      <td>4.250</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>264</th>\n",
              "      <td>265</td>\n",
              "      <td>1.983</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>266</td>\n",
              "      <td>2.250</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>267</td>\n",
              "      <td>4.750</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>267</th>\n",
              "      <td>268</td>\n",
              "      <td>4.117</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>268</th>\n",
              "      <td>269</td>\n",
              "      <td>2.150</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>269</th>\n",
              "      <td>270</td>\n",
              "      <td>4.417</td>\n",
              "      <td>90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>271</td>\n",
              "      <td>1.817</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>271</th>\n",
              "      <td>272</td>\n",
              "      <td>4.467</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Unnamed: 0  eruptions  waiting\n",
              "262         263      1.850       58\n",
              "263         264      4.250       83\n",
              "264         265      1.983       43\n",
              "265         266      2.250       60\n",
              "266         267      4.750       75\n",
              "267         268      4.117       81\n",
              "268         269      2.150       46\n",
              "269         270      4.417       90\n",
              "270         271      1.817       46\n",
              "271         272      4.467       74"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oVgmA6eJiH81",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "outputId": "3fb4b2cb-f254-4130-c49b-3468c060dfd0"
      },
      "source": [
        "faithful_df.head(100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3.600</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1.800</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3.333</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2.283</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>4.533</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>96</td>\n",
              "      <td>4.300</td>\n",
              "      <td>72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>97</td>\n",
              "      <td>4.667</td>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>98</td>\n",
              "      <td>3.750</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>99</td>\n",
              "      <td>1.867</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>100</td>\n",
              "      <td>4.900</td>\n",
              "      <td>82</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    Unnamed: 0  eruptions  waiting\n",
              "0            1      3.600       79\n",
              "1            2      1.800       54\n",
              "2            3      3.333       74\n",
              "3            4      2.283       62\n",
              "4            5      4.533       85\n",
              "..         ...        ...      ...\n",
              "95          96      4.300       72\n",
              "96          97      4.667       84\n",
              "97          98      3.750       75\n",
              "98          99      1.867       51\n",
              "99         100      4.900       82\n",
              "\n",
              "[100 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VDmP3GJdit1S",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "3adaac2c-a1a3-4642-b227-a54fc2896b64"
      },
      "source": [
        "faithful_df.count()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0    272\n",
              "eruptions     272\n",
              "waiting       272\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A-Ohvgaci6BO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "66270e35-d04e-4891-fec2-675d3267f505"
      },
      "source": [
        "faithful_df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>272.000000</td>\n",
              "      <td>272.000000</td>\n",
              "      <td>272.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>136.500000</td>\n",
              "      <td>3.487783</td>\n",
              "      <td>70.897059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>78.663842</td>\n",
              "      <td>1.141371</td>\n",
              "      <td>13.594974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>43.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>68.750000</td>\n",
              "      <td>2.162750</td>\n",
              "      <td>58.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>136.500000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>76.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>204.250000</td>\n",
              "      <td>4.454250</td>\n",
              "      <td>82.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>272.000000</td>\n",
              "      <td>5.100000</td>\n",
              "      <td>96.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Unnamed: 0   eruptions     waiting\n",
              "count  272.000000  272.000000  272.000000\n",
              "mean   136.500000    3.487783   70.897059\n",
              "std     78.663842    1.141371   13.594974\n",
              "min      1.000000    1.600000   43.000000\n",
              "25%     68.750000    2.162750   58.000000\n",
              "50%    136.500000    4.000000   76.000000\n",
              "75%    204.250000    4.454250   82.000000\n",
              "max    272.000000    5.100000   96.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EmU9TjrdjN2G",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "a6a8e6c4-90aa-4fac-d439-7d95c608dfe0"
      },
      "source": [
        "faithful_df.max()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0    272.0\n",
              "eruptions       5.1\n",
              "waiting        96.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tdbwo2eqjYCx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "520043ee-c762-4fe4-dafb-043651d063b2"
      },
      "source": [
        "faithful_df.min()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0     1.0\n",
              "eruptions      1.6\n",
              "waiting       43.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sh79Qffejlmc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "799fbf1c-4f60-48f4-b854-ffd94269003d"
      },
      "source": [
        "faithful_df.median()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0    136.5\n",
              "eruptions       4.0\n",
              "waiting        76.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aVnav6Rejoj4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "d067ef42-080b-4e0c-ffba-3cb3916ef46b"
      },
      "source": [
        "faithful_df.mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0    136.500000\n",
              "eruptions       3.487783\n",
              "waiting        70.897059\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZfpOhkEUjtKA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "outputId": "fba4c0a7-fb7f-438c-fba8-b8d6383ba235"
      },
      "source": [
        "faithful_df['eruptions']"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      3.600\n",
              "1      1.800\n",
              "2      3.333\n",
              "3      2.283\n",
              "4      4.533\n",
              "       ...  \n",
              "267    4.117\n",
              "268    2.150\n",
              "269    4.417\n",
              "270    1.817\n",
              "271    4.467\n",
              "Name: eruptions, Length: 272, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H6Bv0v5wlGLf"
      },
      "source": [
        "eruption_list = faithful_df['eruptions']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W4OVwMc7lpMD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "outputId": "1f1bb711-2ad4-4213-d933-11dbdfee2b98"
      },
      "source": [
        "eruption_list"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      3.600\n",
              "1      1.800\n",
              "2      3.333\n",
              "3      2.283\n",
              "4      4.533\n",
              "       ...  \n",
              "267    4.117\n",
              "268    2.150\n",
              "269    4.417\n",
              "270    1.817\n",
              "271    4.467\n",
              "Name: eruptions, Length: 272, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xRFZXFYCl00K",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "c67d44a4-23f4-4474-f367-27b8db03100c"
      },
      "source": [
        "type(eruption_list)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ExeRrElbl3p6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 446
        },
        "outputId": "b186e960-1c72-4c10-87c9-114199152c32"
      },
      "source": [
        "pd.pivot_table(faithful_df, index=['eruptions'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>eruptions</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1.600</th>\n",
              "      <td>19.000000</td>\n",
              "      <td>52.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.667</th>\n",
              "      <td>58.000000</td>\n",
              "      <td>64.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.700</th>\n",
              "      <td>115.000000</td>\n",
              "      <td>59.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.733</th>\n",
              "      <td>55.000000</td>\n",
              "      <td>54.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.750</th>\n",
              "      <td>63.833333</td>\n",
              "      <td>52.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4.933</th>\n",
              "      <td>155.666667</td>\n",
              "      <td>86.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.000</th>\n",
              "      <td>168.000000</td>\n",
              "      <td>88.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.033</th>\n",
              "      <td>151.000000</td>\n",
              "      <td>77.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.067</th>\n",
              "      <td>76.000000</td>\n",
              "      <td>76.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5.100</th>\n",
              "      <td>149.000000</td>\n",
              "      <td>96.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>126 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Unnamed: 0    waiting\n",
              "eruptions                       \n",
              "1.600       19.000000  52.000000\n",
              "1.667       58.000000  64.000000\n",
              "1.700      115.000000  59.000000\n",
              "1.733       55.000000  54.000000\n",
              "1.750       63.833333  52.666667\n",
              "...               ...        ...\n",
              "4.933      155.666667  86.666667\n",
              "5.000      168.000000  88.000000\n",
              "5.033      151.000000  77.000000\n",
              "5.067       76.000000  76.000000\n",
              "5.100      149.000000  96.000000\n",
              "\n",
              "[126 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MikRDggEnBkr"
      },
      "source": [
        "my_series = pd.Series([34,57,89,99])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KOIEJDWeoVJH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "0cd23512-d718-4b6d-c42a-37ca77fc58e4"
      },
      "source": [
        "my_series"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    34\n",
              "1    57\n",
              "2    89\n",
              "3    99\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xhuPbwHhoWP3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "ef12f72a-c9ef-46f1-ca84-a2677709cee4"
      },
      "source": [
        "my_series.values"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([34, 57, 89, 99])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xkpnJzrkonqm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "edd70f25-7cc2-405c-aa8e-e51a742a106f"
      },
      "source": [
        "my_series.index"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RangeIndex(start=0, stop=4, step=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bplXI_rRoqwU"
      },
      "source": [
        "#import required libraries\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ebn1WKqrp9j3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "outputId": "b386e5cd-a6ff-4199-aba0-2bb551f2bc8e"
      },
      "source": [
        "faithful_df.hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7ff61b68fef0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff61b60d0b8>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7ff61b63d2b0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff61b5ee518>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2XNW_xHgqGze"
      },
      "source": [
        "del faithful_df['Unnamed: 0']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6I5x_j-bqTYI"
      },
      "source": [
        "final_faithful_df = faithful_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T4jXLt37qY2O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        },
        "outputId": "0624d51c-ef47-481c-ee34-e9b4aded99a2"
      },
      "source": [
        "final_faithful_df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>eruptions</th>\n",
              "      <th>waiting</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.600</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.800</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.333</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.283</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.533</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   eruptions  waiting\n",
              "0      3.600       79\n",
              "1      1.800       54\n",
              "2      3.333       74\n",
              "3      2.283       62\n",
              "4      4.533       85"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f6wlKJ_PqjY_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 333
        },
        "outputId": "00340ff6-5a07-4d43-896f-e42bc88dad5b"
      },
      "source": [
        "final_faithful_df.hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7ff61b742d30>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff61b74ee80>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QllYb2M5qtlR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "af3fe76d-83fb-4428-ef6f-78c8d7c18f23"
      },
      "source": [
        "final_faithful_df.plot()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff61af9fef0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD7CAYAAACRxdTpAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOx9d7wdVbn2s3Y9PT0hRUiAkFBMgYAUww3EgoJXuKggiKDcC4pXvIp+8lkAP71XUFBRbNhARQQR6c2bQgstgYT0ECA9OeeknX7ObvP9sWbNvPPOmtmzy0nZrOf3S84us2fWzKz1rGc977vWCMuyYGBgYGBQW4jt7wIYGBgYGFQfhtwNDAwMahCG3A0MDAxqEIbcDQwMDGoQhtwNDAwMahCG3A0MDAxqEEXJXQjxeyFEmxBiBflsuBDin0KIN+y/w+zPhRDip0KI9UKI14UQxw9m4Q0MDAwM9Iii3O8AcBb77FoA8yzLmgxgnv0eAD4EYLL97woAv6xOMQ0MDAwMSoGIMolJCDERwCOWZR1nv18LYI5lWduFEGMBLLQsa4oQ4tf267v5dmH7HzlypDVx4sSKTsTAwMDgnYYlS5bstCxrlO67RJn7HEMIeweAMfbr8QA2k+222J+FkvvEiROxePHiMotiYGBg8M6EEGJj0HcVB1QtKf1LXsNACHGFEGKxEGJxe3t7pcUwMDAwMCAol9xbbTsG9t82+/OtAN5Ftptgf+aDZVm3W5Y1y7KsWaNGaUcVBgYGBgZlolxyfwjApfbrSwE8SD7/tJ01czKAjmJ+u4GBgYFB9VHUcxdC3A1gDoCRQogtAK4HcCOAe4UQlwPYCOAT9uaPAfgwgPUAegF8ZhDKbGBgcJAgm81iy5Yt6O/v399FOahRV1eHCRMmIJlMRv5NUXK3LOuTAV/N1WxrAfhC5KMbGBjUNLZs2YLm5mZMnDgRQoj9XZyDEpZlYdeuXdiyZQsmTZoU+XdmhqqBgcGgob+/HyNGjDDEXgGEEBgxYkTJox9D7gYGBoMKQ+yVo5xraMjdwKDaKOSB1/4M5HP7uyQG72AYcjcwqDa2LAYe/AKwadH+LonBIGHDhg34y1/+4rxfvHgxrr766v1YIj8MuRsYVBv5Afk3l9m/5TCIhHw+X/JvOLnPmjULP/3pT6tZrIphyN3AoNoo2GRhlU4aBtXHn//8Z5x00kmYMWMGrrzySuTzeTQ1NeGaa67B9OnT8cILL2DixInYuXMnAKnC58yZAwC44YYbcMkll+CUU07B5MmT8Zvf/AYAcO211+LZZ5/FjBkz8OMf/xgLFy7EOeecAwDYvXs3zj33XEybNg0nn3wyXn/9dWdfn/3sZzFnzhwcfvjhTmfQ09ODs88+G9OnT8dxxx2He+65pyrnXe7aMgYGBkFQpF4w5E7xnYdXYtW2zpAt1Com0YOHx4xrwfUfOTbw+9WrV+Oee+7B888/j2Qyiauuugp33XUXenp68J73vAe33HJL0WO8/vrrePHFF9HT04OZM2fi7LPPxo033oibb74ZjzzyCABg4cKFzvbXX389Zs6ciQceeADz58/Hpz/9aSxduhQAsGbNGixYsABdXV2YMmUKPv/5z+OJJ57AuHHj8OijjwIAOjo6Ip9/GAy5GxhUG2ql1YIJqJaEnJ3ql6iv2i7nzZuHJUuW4MQTTwQA9PX1YfTo0YjH4zj//PMj7eOjH/0o6uvrUV9fjzPOOAMvv/wyhg4dGrj9c889h7///e8AgDPPPBO7du1CZ6fs1M4++2yk02mk02mMHj0ara2tePe7341rrrkGX//613HOOedg9uzZFZ61hCF3A4NqoxRbpnM70DQGiJXgkGZ6pa9fP6y88u0nhClsAMDOdVK8jzqqase0LAuXXnopvv/973s+v/nmmxGPx533iUQChUIBAHz55DwNsZLUznQ67byOx+PI5XI46qij8Oqrr+Kxxx7Dt771LcydOxfXXXdd2cdQMJ67gUG1EdWW6W4HfvJu4I2nStv/P68D7vpE8e0ONljOf1XD3Llzcd9996GtTa5tuHv3bmzc6F8ld+LEiViyZAkAOKpb4cEHH0R/fz927dqFhQsX4sQTT0RzczO6urq0x5w9ezbuuusuANKuGTlyJFpaWgLLuG3bNjQ0NOBTn/oUvva1r+HVV18t61w5jHKvdVgWkM8AiXTxbQ2qA0e5F8K3624FClmgp8Qlr3vaSv/NQYGyVg8PxTHHHIPvfe97+MAHPoBCoYBkMomf//znvu2uv/56XH755fj2t7/tBFMVpk2bhjPOOAM7d+7Et7/9bYwbNw6jRo1CPB7H9OnTcdlll2HmzJnO9ipwOm3aNDQ0NODOO+8MLePy5cvxta99DbFYDMlkEr/8ZXUeYGfIvdax/D7g8f8DXLPGEPy+QlTlnumxtyvRmy/kazQTx6o2twMALrjgAlxwwQWez7q7uz3vZ8+ejXXr1ml/P23aNPzxj3/0fJZMJjF//nzPZ6pTGD58OB544AHffm644QbP+xUr5GOpJ06ciA9+8INFz6NUGFum1tGxGejbDQzoh5AGg4Connu2J9p2uv0XiowKDkYMgi3zToZR7rUOpQqzffu3HO8kKDummCJ3lHuJ5G4dgMr94S8BS+8Gvt1WfNtAVN+WqRRcbR9MMORe6zDkvu9RKNWWKVW55w68NMsld1RnPwcWtx/UMLbMvsRT3wLuOKe03/TtAX71XqBd7wcWhUPuveX9vhx0bAV+cSrQuW3fHbNcLL0b+Ntl1d2nFTGgmun2bh8VhXxtTpAq73HMenS3AXs3VWdf1Ua2D2hbM+j30JD7vsSinwEbni3tN7vfBnYsB9pWlXfMfFb+3ZfKfedaoG0lsGv9vjtmudjyCvDm/OLblYKSlXuJKtwqHHi2TFVguRPAKkWm58CNM2X7gFyfzGIbRBhyP9ChZu2VOwxXBJPbh+SulrodLOvgxV8Bj32tOvsq5LzByXwOuOdTwLal5e/TihhQpbbMU9+SmU1RwMtsoIHxdwy57w+Uok6U4i53CLc/PHd1zMEioCe+Drx8e3X2xdMKe3cBqx8GNr9U2T6B0gKqy+8D1s+Lvv9aVO7VtGUsVDQK+Pd//3esWiVHy//zP//j+e7UU0+tpGRwzrFao5QA1C65L7sHeOW3+7sUepTif1es3AeR3P95HbD5Fc0xbSsoCgFZFvDkNytTylGQ7QP+8Tmgq9X7eSHn7TidjqkC8nSyZYopd+K5F3LFr9ezPwLW/6+9fQ2SezVtmQozb37729/imGOOAcDIvZDHokfvdu3OsoqmymXIvTz84wrg0Wv2dyn0KMULdJR7ueSuPPcqB1TzOeD5W4E1j2iOWYItk+0DXrgNeOOf1S0fx+pHgGV3A09+w/s5J1VV5kqUsSL3yLZMzt/J6PDCz4GVD0TrCPYl6AjtgLGLZEfxwx/+0Fla98tf/jLOPPNMAMD8+fNx8cUX4/Of/zxmzZqFY489Ftdff73z6zlz5mDx4sW49tpr0dfXhxkzZuDiiy8Gcv1omnA0MNCFhQsXYs6cOfjYxz6GqVOn4uKLL4ZlE/djjz2GqVOn4oQTTsDVV1/tLAe8L1H7qZB9ew68BZYGuoHmiNsq5V5uY1aEUW3lrjx8XaeRL0H9lqLyfWUY0M+6XXE/UDcEOHKu+1navuADbMnZwVDuji1TLFuG2DKFCEHSQlZ2HIXC/lHuvbtlh37mt4E4oY4Mme1p5RGoGR+/ViYHBEHtJ9UUvUyHvBv40I3+z21RPHv2bNxyyy24+uqrsXjxYgwMDCCbzeLZZ5/F6aefjo9//OMYPnw48vk85s6di9dffx3Tpk1zdnPjjTfitttuc5bsdYSZfa9ee+01rFy5EuPGjcNpp52G559/HrNmzcKVV16JZ555BpMmTcInP/lJfeGMLVMh2lbv7xL4wQkmDI4tc4B57lm7XIqgdMeMotwrCb4OdOs/f/ZHfk8+bRNGP1sru5CDxw4opexBiBxQ7XaPFUW557NEtVv7XiWvewJ4/idA6wrv5/SaHjD599KWOeGEE7BkyRJ0dnYinU7jlFNOweLFi/Hss89i9uzZuPfee3H88cdj5syZWLlypeOzB+9W1RN5r0466SRMmDABsVgMM2bMwIYNG7BmzRocfvjhmDRpEgD4yX0fxXprV7m3TAA6twCtK4HDKg2AVBkl2TIVeu6DlQqplDsl9z0bgU0vEjUegXzUtkHEZlnAS78CZn7KVd8KA51A4wj/b/IZ//VSZennyp2kLcYTxJYhZW9bA+x6Azj6I8XPx7PPiAFVq+CS+/bXga7twFGatUYUuXuso32oz7rt2ae8/lKxEtZB6RQ2xfZl8n6Pm1Fe+QCgb687mrMsJJNJTJo0CXfccQdOPfVUTJs2DQsWLMD69etRH7dw8w9/gFcWL8GwYcNw2WWX+Zb79YHFU3RL+BaH8dwrQ+NI+ZerjAMBpZB7rlLPfZAmMemU+9K/AP+40n12aCTlXmTbjc8DT1wLPPIV/3dB17GQ9e9PvdfZMgBZ7Etjy7z8a/3xg1DywmEkoPrCbXKhN98+Lfe8oubRVxtqJcoMGzHRDrOiEU8VsmU6tshyEstj9uzZuPnmm3H66adj9uzZ+NWvfoWZM2eis3UjGutSGDJkCFpbW/H4449rd5lMJpHNMsEScp5TpkzBW2+9hQ0bNgCA5rF5xpYpD28tlA9AUBW/daVUrSv/sV+LBQCI2708bxxhqFS570vPvZAFYJEOKQL55Iuo/ESd/Ltzrf87fh3XPiF94bzG4lDvtbYM+V4XUM1nSptwUigjoKoyYPJZ/YO1aTmj2j6d22R7qBYUufNO1WPLVKHDqYj0LNJJyP3Mnj0b27dvxymnnIIxY8agrq4Os2fPxvTjpmLmcVMxdepUXHThJ3Daaadp93jFFVdg2rRpMqAaIVheX1+PX/ziFzjrrLNwwgknoLm5GUOGDPEUcV+g9myZuy8CTv6c2xj2bJRe4d8uA8ZOB4Yfvv/KlqyXT9ApSblXSu6DZMtkNbaMM0ooIQhczOOO2U/L6dasX06v40A3cPeFwFk36pW76kR4h+BT7hpVXOp0f2dfEZcfUB2HSonUXQtnhJPXl1GH35wpLZ4bqvNMTteWYaMf+r6iLB5qV5T5tCNG7LAszJ0711XegLu07643ccet35N2X99uYNRU2UbhfSbqTTfdhJtuukm+6W5H9xvPA4U85syZ41n7/bbbbnNen3HGGVizZg0sy8IXvvAFzJo1K+A8Bw+1pdwtSy6jmu33koYiomy/9IRzA/7f5rPAxhcGt3zJBvl3oFM2/LefKf4bJxUyYvBsx3KpXhXUdaj2DFUtuatRQq/32ApdO6R/TZEP8NyzfcCml9zPu1l+OuAl93wGgCWPnQ+xZTg4UeY12TulLtQVdclfde1UfSzkbf9dk0PtXKdc9P13bff+Vofe3dLnD8LezcBOexmJSMqdd6oZN2geBqrWK+I8i6W4F9uZ5arxKAKo2BwGywIGuvCb3/wGM2bMwLHHHouOjg5ceeWVxfddZdQWuTuEThq38jMBYPdbwO8/CDz8X/7frn4Y+MNZctGrwYJSoQNdwMbngDs/Ep4aBpSu3P94rvRtFQYrW0aVy2PLMAuIN4D53wXuvcT7WZDnvuJ+eT8UoVAiUw9QpiRDyTnMc+fgAVSd517I6wk3CNy/1yGfdc89P+CWoZDXkyEVK1FHBgphNuCvZgO/nh38/RPXAvf/h3ztKHe2v6CAqmXJDn33mxEKaQW8LhEa5R66rWW5AdhckWAqAKCI5961A9i1Hl++6j+wdOlSrFq1CnfddRcaGhrogYuXrQqoLXJ3GkvW66E66tW+eRuek397drnDfVVBdal9CoU8sPON8svnBPW63SCUIqiOLXq7RjeJqXe3f6alwkCnt/FxNV0qenbqLRFHudNjseAtJ/fe3S5B8N9Yefldz053v1bBn90CAEnbh/eQO+3Y8xpyJ2XJ9Pp/l8/KlTe15G7XoaiNMYptQutZjlouuQDlTjrBqBOtRNx/rB3LgTf+1712nVvsfVlAuyau0d0qCauQB3rtexNVufd3ALBgZXpkhxU2grAC35SIUoKyalvbAgoi90LeHV1xzz2f9XbGNAMq16+PJZUxQ9UqoyOoTXKnDaBAiF5Vrj7btnj4auDBq7zfhamt+d8FbpslRwBllc8+xkCX24DVZ3/4MPDsLf7fOEN2Uq4nvwH87VL/tup5qXTbSlMhH/qinO3rK5fKltEQpToWJ59Mtzx3WlGpLXPzZOCHR3j3RRucuhbxlPyrI/d81tu5O98TYund5f/dm/OAn5/k3luLKXcgWmon3S6MfCnh5sk9tvJ6EqTXKWqqZVKNcOwOeKALuH0OcNf5wDM3e7d9+xnv+Sv07ZXXq3e3e14+cg9Q7r27UNfxFnb1WrD2bgT2+h9M7aIKtoxFFLEVUR3TDJ1sALl3t7miztlvQf7b/TbQSUb7FrknbWvk9asQlmVh165dqKurK+l3tRVQ9fiS9DXznZXa7NvjEkaxlDxArusB+DMuosJR7l2krPbfru2uBZHPSvVbN0SfedK7S6op3/5Jo8/2ufnTgF+5D3QDsYSrgoOwd5Prm2a63Nm+zojCzu5IpFwyC1oyIdMrt8n0yElFvbuhzXMf6HLf0/hI1w5g2GHud7pRQxRbpm+3PI9YwiWsnnYAlkv8hbx7jagloqw1QDbcVCMQT7JjRbBNPMpdqUKbuK28JBFBgoo0FhB17ZpEWl4jdayuVlIH2YhICZ6+PezzPbLz2bPB/SxqQLVvDya8ehO2JL+D9r0T5Tm1Bah3qwB02KO6PWvc61zIe695GCxL7iPR5dYBui+O7lZ57dO9boe1S3UGwr3+fXvk97tj8rWqd3tWyX3Ek0Cj3b46t8njthfkSKct45+f0bdXXrP2vKw/EVBXV4cJEyZEuw42aozcdUPXgvs575mpl6pTyByKtBKl9aCe4wHyxuaJcs8NyDKq4fkLPwcW/x74r9f1qZCK/Dlo1sWjXwW6dxByZ+d+18fk1O0P/zC8zL27ZLmX/AFY8N/AV9fLyT5UUWd7JLnz5YV9QVK7zP0dUiH++nTgg//jP7+Ni/TKvXObTe5qBKRRjPkBb6fmfE9trV1yid3hR5DjqDpCRh1/uQAYfbSX3EGWO7jpMOCYjwKf8D48OVKqIu2YeEAVkPc4kSLl14iVYraMik1kbOLqIZZYkG1FLQbLAvpt5dmuAuHC7+HrRlAA0LsLycxeTHrjd5LEurYDX1qmL2vvbuAH9mTDr6wBWsYCrauAX74XuOoFeR+KIdsH/PcpwOFnALveBDo2AdesBZoP0W//m/8Eti4GTrjMfZLUv88D/vRvcsLVjIvkZw9/SX5/7WbgsZ8Ar9t56/+5GHjsStmOLrFTrb//QWCgA/jXnwFPfhH4wPeAGV/0HvfJb8q42Hm/Bo6+sPh5lYmKbBkhxJeFECuFECuEEHcLIeqEEJOEEC8JIdYLIe4RQqSK76lK0HnugNtwecYIzTyIYstUvPwuScejtoxqHGp43rXdzXTIaSyOQs4fGyiQLItCXhK7UhG07Aq73y7+pCTLko2uf6988EbfHvehzrRzyTCPXb3X2TKAJOWuHQAs+QBvte0wOV0bby4gHQUh965t3uPoSCVo1OAZ+dgxi67tRPFn/L9X94Gna+aJ/77qQfgQNtFF/U5ny6hUSMDvu3uES4Cnn+mR56WOoQKF6lg03pHPeUdFzv7JcTM9bnkUuQ95l9+WofeIx4YAOQLV1VkKTyBWZUjZdUS1hWLIazrAsPZMY2AKPTslOXds0WzX5W1HfXvlOVEbbcAe1eu4QtlFUUdeFaJschdCjAdwNYBZlmUdByAO4EIANwH4sWVZRwLYA+DyahQ0EnQ3FyCZHVy5kyBPFFvGCRSWudxnkC2jFGiOdE75jJ3aqVHuqqGoRrxjOfD/hrkrK6rzp/67z5bpLO7ZZnok8eQzrq+oiJteS/5EoaCAqvptPzk2XV8lZg8kNz4frNwBb+xi++vAd0e7j1QLOjZtgL273XvvELZNdDmSeqqIlJLpxkXAd0cAm0LSZoPId8H/AL8/yz5vXUCVLAjGfXe6GJvuMX75LPDj44BbjgKetnOyueeubL9kozy3HhIoV0Q/0A3cNElmj/UTv1it0TR8kp/caVm5fQgQcg8J6utW5tSNJsJQ0FyjsDqutqH3whEvhMTzpK56yH2Pm3rLoXvK1t8uBb4z1D2vQV7Zs9KAagJAvRAiAaABwHYAZwJQj5S5E8C5FR4jOrgto8hCEQRV7pleeLIqopC7qpxRKxuFZenJPZ91G58TWCOdlG75gbw9E1RVtLX2tOn189xtC3lG7n3e32d7i8+67CP58rvsQJuTm81sGVrGoMXO1G8HOskohk3BB+ygq8ZzV8qTKq49G+R161Dk3ueeI4Xn+tnXhQbbdbaMsu2on//Cz+XrsNzwIFtm13p3pq3q1NItXuUeREraZAEWp1D3Sz3eMMFmRHe3ARBA02i5D4+St/fft1v+2/22Nxi47TUg1axX7rQe6cg9ZXcm2R4ExiE84oVdg2IiRPc73TUK2p7aTKqNe0YjREzk+oHGUfK9EjzOWkokeKtEBu2A1Sgv6vIUFaJscrcsayuAmwFsgiT1DgBLAOy1LCdkvAXA+EoLGRm0AeSzrjeuCIKqzZ52t4HT34ala3Hy1WHDc8DPTvAO9f5yAfDiL933PFtGNRYnuEs6nCwhyj+eK70/vka7qmRNdqVzlDshplyfW/lUdkOxBw7QrBKVRaFTNr/7APCXC8MDqoW821H1dxDlTsmdVHpdp6TWDFHHGehy75u6dkHPJeUjH6tgL1MQZMvk3etISWbjIvmaBqIdi+Yh4Nf/Eqzcs/1utpAqZ7rF67nTjsRTflZPAW/nQdWnCoo6nrtS7m1AwwjZLgo5N+0U8M9bKGS9yr1vNzB8IlDX4s9zz2fcY/HAtXNedlmf+xFwwxD/teHzCgB/0kEx0OWjo2QUOeROlbsamTIxBEhRku1zPXzV7uj3Co5VqTn+ga7chRDDAHwUwCQA4wA0AjirhN9fIYRYLIRY3N6uyaMuB+oi5wYAaCYn5BhReDx3kmsc9Tg6tNoPhqZpX1teAbYuka9F3A6gUluGkTslHDqJafPL0oKhw0TAnXilRiqFAgnUauwp5QsWU0SU3PkqkFTZ5DPAusfda5fVeO7UFurvIOfAHljBX6tr0jBCKk2Pv0nJXZFTQFyEk7uj3LktQ5ZOKOS8HcBAp0tYlOBUo25dAWxfStQ/U6k5e+Z0bsA977oW731XyjbIc88FqGTuBQNuQFYdq2enVO0qA4gGWB0BREY+PHNm2ESZ+ZHp8irwXMbt7PgjC53zsq/h/O96z0dBa8sEdHRB8NSfCOqYW4OAvn7TGE+uH2iyyV3FAtR+6HyQIHsQOPCVO4D3AXjbsqx2y7KyAO4HcBqAobZNAwATAGinfFqWdbtlWbMsy5o1atSo8krw8m+AHxxBKiRr6GHKvbvNG8BSv810Ab//kFx+NAhOJSpIxbr4D+536qZ2s8wE9XmqUR5XlTGf8wdUqaqn5F5QOdyqUpL0K8BPlHwavrpOjnLPAMv+Cjxwlf48e/f4P8tolI1znly5U2VJyH1A47l7gomE5NT5N4+VZETPh5J7lpN7iHJX2TSekQ3bj/JtKVGoyW+03IBcqA4go78Ai8/pXLv0yj3UlmGdEN9GjagS9a7iVp0LDag2jnKXNu4OI/eMP0dbkTvgPf98xl1aQxdQ5TEw3fnpAqo69f3kN4Gnvu2+79gC3H6GN81T57l3tQK3nSQzcPhxMj0yDgHolbtjy9iee12L5JZOsrzDsnuAX7zH/Y1O4PBzPYDJfROAk4UQDUIIAWAugFUAFgD4mL3NpQA06QRVQm5A5pLyRuUj937vX8AlCup9A1IFb1okPcYgqAqz8n6pWJ/6lvudqhR0yFvIuw1MBbkc/z7jpqrlmDWUG/CSu7OeN/OrnWAnJXfiuavVKGkqojrOhmflo9t0oMpdQTXqXL8MlFFwK8VD7oQM+ju9DUZtq1XuhNy7293fxVNyNOFcK24raMhEzdh0AqWakRtVXNxzp3MLqO+srn+O1T+fLWNfl4FOeT3iKal4nU6dpHDyuI5OudORgdp3y1iXlHlWUU8bU+5EaaoyqPPPE1umcbT8O2yS+5Qkz7o+WULuLCtJfVYKuQcp982vyBTCRT8Ftr4qP9u+DNj2KtBKRrQe5W5/tuQPMt7x2p/9x8x0u/nmOvFCA/i5ftmB1g0hyj0r7SZ6TtwepLGjA92WsSzrJcjA6asAltv7uh3A1wF8RQixHsAIAL+rQjn1UJNH8qwSKPWliJSrEsAmCuLN6YalgAygPX+rf1ZloQDM/558P/oY9zuH3Nu826tGoxqBE4SktgzLjKENKGcvjEUXYsr2yPKrRuhT7ja5K7X114tkVomyEZTtkGXpXIDM7V1+L3xwlE0v0DDS+51TuclTjR76olyQjdsyUT13dU1axkoyUuVMNti2FbNTwsg9nnSJrZBn2TKMmOkKjTyWAHg7qy6m3KkSp3DiAvbEolSjd5IU9YpbV8iVTJ1MGtaJqevklMc+75bxsj7QAL6j3NslUceiKPes7CRETM4tAPzK/fGvA2/Ot5W7LaR2vwXc8ym5H48tE+Kx82vFrSn1d8H35MijYQRw18eB+z7rjkJpBpYuoLrpRfl3BFkV1un8uoEUa5fUwqXtMdsnzzXdQrK3csAEuuojSD2kk+TY/g5g5Q7Lsq63LGuqZVnHWZZ1iWVZA5ZlvWVZ1kmWZR1pWdbHLcvSLMFYJTjkzpW7fUif584yPDwBVRakVDfgyW8A/7yOLZCVlUphz9vyfS9R6apxcFsmQ2wZwG1wHluGDedpgCZHGh1V7nTqsy/zxM6oOXwOMPkDUuVsX+YNqDpZEmQIblkycLt1CVA3FJ7lV9Uxsv3uA1EAOazVecyv/lFO7adBq4FOopoieu4t4yUBqEaiFCT3SGm2i6dDzklSE3F3/1SVc3Kjyt7ZhjR46rk7jVx1NCRA6rkeSrnbtkyqyR1NqP/KVzUAACAASURBVO0Vyb21UD6DQK394owwSXPSxTRaxtn1jeSoq84k2yOD7rGEvB66WbJZMqLs3ysVqurEh02UpKbOYfHvZfptfsAVLRsXyTTKPRtIQFVjy4RlM/mUuz1q3fC8nFh0/m/lCGTF38lKlYzcqS1jWS65e2IWpFN16pMm1de5jkq510lrRomqQtYVXLM+a/+e2YO6zKQDVbkfEIjZ5M4JWjUin+fOhlq00nHlxisfXT8jn3MfgnDMuVIRrXsKeOnXRLmr1Qzt7I5siC3jy5bJ+o9J892p506nhWuJMgsMfRfwwe+7vxkgnrs6b5oZQYNddUO89kuGKJu6oVLZAW56HQUlXEok/WSGbpDnztVy81j5V3VmTidpX7ssU+6AJMv2ddI2K2QlqcUSLmHrsmV8AVXSAXiUOzkfNRHLsdXIIlNPflPOeFz7OMkl73KtgBiZJE6Vu9p/htgkHIW8DHo+/CVXYLSMk3/79niVuyIXqtxp0JZnCynPvW6oVMoiBgw91PugcRUTymfJKLnff/yKPfesXNulkAXGvBs44kzgRHv6jEpcoFafJ+8+JxdE0z1chpJrinnuOY0t098pv0/Wu52c+j6fAUZMdmdcOwuI2cfwWGBkXsMg4uAmd7WAFJ+IpBp6mHJXNoDvt2TNFArPVPesnEU56mg59TjTJX3A53/qD6jy4KfWlmEPbQhV7hkvMdJKkyUVijaWWMJtfNle13OnMQeaGUH9wb0bgfqh5BhE2STr3ECUbsq/jtzrh3ltGaqwPGTA7DJFWiqIpYbRAyQGoH6rUMgBax4GFv1MXidK7pYdk3Cm+2tmqNJnm9JzB7x56qsetJ8AxUaO+az0iN+cB7x+L/HclXJvBGKkCRY05E6VNIeVl2veL7nDDfY229epf6/XTlACoq7FJXdKgo5lREaufXvkvT/uPOC0L8mRsrJfMj0ALNmh0YCqKi8dCWo9d9a+6KhP57m3rpSvxxxrn4ddJ9Xktf4Of51R10htAwTPpuUjao9yt8uqbKZEnVfwKAs0nnIFJ3cAdBaYUe4hiNuqhwdFfcqdDdkBuBNY7KfI+5QLq4xURWd65AzFI86QihWQFoYatgGu5+6oviBbJktmqDKCoguUZcmIgu6TZqHolDsgK1yKNL4gWyaXkbMoeQpcHSF3qtyTDe75FFiHAnj9cHX+zeO8k5gUPDMvNZ67o9xtC8QZRity17h/hZxLMplem9zjrh3jUWcBIzdq3dAGr8jyfTfI6/n8rX5y99iAvUy59/iVO70GqqMe6ASe/oF/qWS1vbNkhb0EtKPc93o7CnU+8TRR7qSOBNky9cOAI98nzxNwBVWWKOFCjogHnZAq4rm/8lugjWSxtK+VmXD0HrSukPV45GT5WT0jd2rLeIKXOW/H6OEA0qHwzkkX23Bm+DbITlJBrUQaT7qLlPElOXo0tsyB7LnvdzjKPSAFLVS5M6XoNMwA5U4V8p4Ncl9jp7uZBNle2Yho8IqWxcmWafC+LxDPvZCDk6MOsIAqy5pR+9BZBT5yj3tTvVSeOx0F9O+Viyg9fZNUmoD0gz9yq7sSZHqIV9kk6oBjz/P62BQOARDl3nyIPYQO6AhUZk+O+deOcrdtmSRX7rrUzJxrN2V73YCqbiE5nulCM164556oczuVcTOAie+VyjmM3DM9Xs89q/Hcaaemrte2pXLBtjWP+M/PKrjlVkHdFrsTpMo90+2WLZFyUyEp6eWZdZnP2IHGJu8xuTJV10FNYlLnGNTW6GeAvL6PXgMsvdv9btndwGNfJVlEeancR01x42x1dp10lDshd0+6aN57noHKnXvuGltGdbAqoOp8n3GVuxDyL5+hSnPgoyxSWAUc3OQe5LkrBHnuiXpG7ll/g+f7ogsJORW6zp2KDHjJRM2mdG6gHdxzPHel3DNeEs8PuOejFL2Ie7MYaEBVKbxUE1mnhQ2DYwnZKERcVl6PLUOUOx9Sn/cruWJe/VC5//qh3gBmsl6unnfCZa6NQUFJTv2uZax3VUx63uqaen7bJ8tdN1SeRxe3ZVi8gqKQJ8q9R3ZysbjfG+evAW9aKlfuyXq3U4mn3Fx1x47RkHv/XnjWQ8/0yA4qxgKq3JZR6Ze6dcELOaLcd8j2oIKffXu9HYXaLp4Kt2VoKmR+wL8CqhotKxJU158rd0qOlsaWyfVLxa7qom4hOtoWW1e6lgzgKnea3sstVsB/ntl+YN2T8tGB1BahtiUvv2pvKr05Ue8dzSqLT4nNWNJvy3iU+76xZQ7uJX+dbBnNTQWC89yTdd5gGq0AQZNgVNAMcBtePOVO+VdQFUBN3+b2Dh/+5bPetDo6q1TZJ+kmYhcMuCSR7XVHJ3VD3OeM8mFwLCEVRapRnp/Olunf6567anCqsh52mjzmzvXeVEh1feNJr33hnAtp6Op3jaPt5Rf4tiTDaYD8Njdg2ykxOYJw1BMLqOqeoqN8Y1WGWAKI5fXb8rpDH6BBJ2fFknJ0kSHknki7gUUAvglRgPe5tjQVkl4Hula7MwK0yV33DIFCnpByj6wDapTFlbsqEyX3Qs59rSN3tU4/hWPLMHJXna1OudO2prDpRfkIP6c9EDLlBJvrlyuCqlVDAfc8FQY0o0HAK2ASdbJ8D3xeJkLQMiXSXlJWy3UI4bZHNeJN1nltGUDeL1WmeILE1Owy6WJaxpYJASX31Q/7G61PBapAaz2cByoD8Cx/qluoC2DkbleARMq1ZRR62t0Mku52/35SIbaMKisPqKaaicXBhvqZHnk+ibR3qEuPq65Tsl5WOk+2jAqoashdXb+T/kOuWZ5qsFVgzuuz0gwUCjpiynTLcibr4eTr67bV3TPlSyfqXVJVXv9AEc/dsWV6XM9dF5zM8fIQX5TaMvGUvO8ecq+zO+UQ5U4nhHlSIXlAlRAy4Cr3DKkjChazHJKNMptFxO1sFRXDKLj33LGmbEGj7BSdLZMfcG0yBW7LqLqbCPDc4yn/qAhw7xtf2pqWwbF+lKVJRhF8Ah21ZSioLZNukeXr7/SKJFXOeNJt21ZBTmTc9aZ/vwmWLaPKqjq+OOkQdfEaOt9h0W3AjhX+clcBBzm52xdx62I5ceKNp7zfBz34NlmvCbqwCVDcNqAph1mi3HX+m1p7om+3v2Lwac5q4bCUnWJGbRmlsNWSBfR3gOu5pxr8FYp77oBUSVS5w3IbVT+xZRxyZw071ej1jhURx5TnHpDXneuTjSbV4BI1X9ubz01wiDJDyD3tkoITmLbfa5dDyAF99rlkeiUxxRL6joATEF0KgqZCxhPea+1R7iz2o8qUbmEWTYc+oAo68ci+F0HPygX8fnKyXirNuiFeWwZwlaNHuWdJG2EzdNXaRLwOKKFAM3/UsQEyWiOzxHXXm2eVUfLLMvWvtqUdTSzubXcDHf44GQBPRlxdi51Vk/WXSZF7ltTL+z4r57jw/WqVe697bVQHCJDVTTXB+749wFPfBLa87C93FXBwk7u6iKri8gc5K/LhXnCijgVWqOdOVsWjaF8HDDlUvs6wytbIrBk1PMtn/PtRyl0hPyAbSOMI+T5HZqAOEFtGwUfuvbLDoI9603nugCR36rnTc+nb6zYwpXZ5w042yuPxGcCxBHwPSAGIcrc992SjP9vC2TZgPSCAdE4kkBnJc2cB1Vg8hNzZfaLpjDQ7SdkyCo5y7/erf3XvqT8L2IRm2eTOHgHndBD28ZUtowMNqALuNakfatsyebeNqOvk8dxzGlImCQU6cueds0PuzF5xBEBab4Opz5SVGGbLODYoe5whva40vZaC2jLpFjcxgtc/lcZI99Gx2Q5Gc3Jv8I8csj1EubMMKECv3NXf2OC44wc3uaubrdRcPws68YoJyCFrnDVwT7YMWdCLItsjMzZiCX9lG3000DLB3Vbd+FzGT3iqMSn0dwKw5EQRIEC5U3JnjUBNqvAo96w3WKMaeKrBtWVUhXKCqHsiKPcGWdmdpRQUuSeDg2aAbOhZW6lyz9YBe3oQJQSdLcNHQEE+uuogs73uDFUt2XDlzqb9A7KBxpNekokniXIPmIxdz4hAEbZPuWsQtuY+TYUEXIKtG+LaFI59pSH3QtbtTHn9z9n1kNsyvHNW10fVhQIbASfq9Z2po9xtsqXKlk9gU+2N10d1XUXcXkSuCLnXtbiTvXzKPeltQ+q3OXsJD7rURtNovy2TIbZMjAktdb5B1zrGOq0qoTbInT4EgkL3rFPlOXqGSTn/UFo3xGsZawddWGX72O+BC8hzNBW504dlKChSUlBlVmpfLQtLv6MP2OUTaZTdQSsmr7iOcq+X3m8+44421LXTBVT59Us12srf7kSVclL75+SWJUP0TI9dTtWpaGwUekyPcie2jFMWNgLSETZf+EzlIWtVfoBy93zW55K5U960LDNd54aDKsxUk+uj81TIUmHlvcdU5B5P23Uv77evlP2grMik5nrT7X0BVea5O8dmoqWYcneW6SBJAL5tmOfOyVdd15bxchSjDToTyzXd7Aa2ffG5tFdxK+TtGNjMi4GrX5PPdx020W/L5Afca0PL6dgy/a5I48qdj0iqhIOc3NV61d3675Maco8lJEEXVe5Zd3uF5nF20IVVtkQaqB/ubqduvI7cOSk5MweJ2ue2DH1COrWYMkq5M3Lnas+xNRrdSUCK3FXl69N47ly1JW3PXdlgKh1N7d+nfmlAlSv3IHJnee6At3NS4PnXOgLpYTadmqEapLApgtLUYkzhKc8d8D+hSIHO8G0c5d4fPkO1VPg8d0XuSddOSjL7SnVwivScgCqrM06qJ7dl4gBEBHInAXLd6EO3NDaHz3Nn5K6u6xB71KxbxVS17VjSvhaWd98K8ZR//4DdHrPy98MPd+cRcOVOy+exZUhAVdmrfBE4Y8to4Ph/AeSuU+6qgfOHTfAZkeo9JVOfLUMqA1XXjnLPavw6nS1Df8NsGREPtpccz52Ru89PJLaMagA8TkCVe1+A556yPXdF7ko5qf3rCBaQKq6/UzaIQFvGRpjn7lHubASkA112We0nyHOPCjp8FzF7ghh74hEHTdtTM5qBaLZMGGgKI+AKh3jKrdM8NpGgM1SzehuMnouu7sWT/jrG67X6Xiew6PcDGrXNt6GjDgp1XYe+S/7VkbtVcHPQKR/w5ynHk3p7JD8gO3p+nxS5U5ERZsvk+jSCxCj3YDjKvUf/fVDF5J67TkWqZX095D7WrtgaJUHJRpFefkDjuXNbRqfcbXK38rLR6AhATSjS2TKwvNvqlC8ldxGDd80Z+/g6zx2WayvUM1smaMZdISczh+qG+LMtOIp57gpJNgLSgTd2p2OvkNxVGenILQzUllGPaAOqY8tolTsld7b+Op/ElAxQ7k6AW9eGUhrlzm0yltoKuBlhgJ9cdXBsGZV6zMpSx5Q7feavgjrPeNJbRj6jWdlVHE7yBGuD8YRsQ/R+6mwZZw2rTPBo03juGnDPnSNMuXsCk5rf6ybltIz33giP91rn5iyHee4+r9guh6qo1HNX+9WRe+NoqXoGumzlHlJBHHInHQudfKUspW6Wducjd7tyqiUAlHKKoj57dkq1EytG7vY9ox64U35KFKyhBB2TImZbElFsmSDEkv5GrKtnFNSWmXmJ+7pi5V4ItmXUoyad5S5s9atsSavgVe5B4LaM2ocu24Tm7PPsJwA44xvARX+Tr4NGbhR8pU9ex0uxZVTaslO+gFRIDue6ab677FFg9le9++DlpE9do6N7Wgad118F1Aa58wf2Kugqbizp99wzmoqmWw+jeaz3RtCbKISrTKgt48uRDbAT6gm5U+UdpNzV8L57h2zAYY3U8dypcif2gFLxXSztThdQBeRSDDGihHg6nw5W3lbuxWyZADLh5eGdpA69OlsmIKAaFXGSClmOch99tFyTCLBXaKxiQJXaMop8qS2j1j6hx0wwO4WDB1QB72Qf57OUt55mSUBVoWm0XB8GCLbwKHwBVXadVb1VM1cDyT1r2zLkXKN67kEdCyDPhT7TwLFlmOfuzHfYt8r94F5+QF2Ukjx31cA1kyYodFOmm8d6bwSvbKlGqaZDs2UCVJ76DT+XRJ2eAJrGyL9WQZJ2mBp1UiFJx0JtmcaRQDv8yp1XdtUhtK+VnZEQ3v0XQ11LcLaFQtA9499FsWV8yl0TbykVNKBajnJP1AOfeVwuGT300MrIXTeJSZXLSVclM3lVfaXkE1QfFXTKXWfLxFNei8lZ6oMQaixe/P5TOPfJco9BcdzH5ITBEUfK9zqRp64RXa4Y0Ct3nYhS1zdohBXTiD0+58TpaI3nHh3FsmXCUiE9+csRbJnG0faKeizHmUL1zI4K13juQZXIIXdWlmSd3pflgTmd6lDwee4CaCDZPSrHnqaSxtMueSuoTIGd67xqNKq1ECmgGlG58wCeDr27WGds33s+qa0UxJOumlX3vxTlnkjL+3X0OfJ9VVMhG91yaZW7hnyKdUxB94MLokQE5a46V/p9GHzpiqyOpxqAoz7gnoOOBxxyZ8pdl3TgdNaauhVUxz18oFl+INSWMZ57MJTqCZroEeS5c1LW2TJ0ZuKJ/wGc90vvMdUQl0IpY3UT8xrfPpbQE3EQuScCbBkayOHZMhx0hqo6Ft2eDi2d42qunVp2t5DzqtGo5E6VexB0pK3z3GMJvaqk6O/0ziSk5FIu4pUqd7ZtRZ67TVyC2W4e5U48d51tUKyTDEpK0AUkYxrlTs9XLf8ARCN333ED7reqF1rlTmwZWn+4XUo9d07CQHC9jWnIna/RH6TcFTdUMnoLwcFN7mrt5CCEBVQpdCqSTn445Dj5wALAvZm6iqZuXrJRbkcX5qLH11UUpe58tkw6wHMf474uRu4qTqA6n/qh3jLwB10Deq+1bqiraqgajRoQotkyQQhV7oSI+GQiHTJd9uxdZUfEK29I1JZRxy9K7iTwzK9VlPI4pMDEhFLuqnNW9zeegmNlOFacRcinBM9dG1DV3MNI5E6VewRbxneMgLrD15KncAKqyXArL5F2988nKAHB6lo3kue2jKPcA5IAjC0TgLAhTZDqiELuVHXzoT39S+GQe703HY0fX9dgHHLntkyRgCqgSYVk4LZM3VDvOUVV7kK46r0c5U5tmSCEeu50iK+ZLs4x0G3PICVecyU2CADPwmFRbZm0PXrQEWlYedT26l5zla2WHxg7HTjjm8Dk93vLBXgJzVnYityvYmUPCqjqPvPYMjpyjxdPmw0tS0BZ4yH3lWbLhHXCNM9d1+bKtWVoQDUow8vYMgHgFY0SZ2TlruvxKbmT7WMhDVr1zMkG2SjUFHB+fB0ppe3lX322TEBANd3iNn6+tgwHT4Xkyp2vjQ0ENyRF7uV47twO0iFMuXuCc4nixGTl5TWiq/VVbMuQGalRbZlESl577bmFkLuKi6hRmpbc7fVh/uX/kPXE6fwLQu5OJ0fJvwzlriX3NAuospVDgeBRa1SE1Z2g81DXiAdUdfumk5B4Rxw0Oi1my1jEltHNag3bd4WoPXJP1gd/B8CTp6ygy5On2TK0AaoboVXujW4ZHOUexZax7aV4Orpyjyfdxs9XheSgigSQJBBnDZxXvCB/01HupEPQKQ/dZ3VDAs6FNFqdutUp5Fi8eEehfkOzRCold222TLFc8ZQkWW08IYTc1TVWyp1fG2XL+JblDbieZSn3qLYM6zhV0DoooBqEsDhKqAUb8DuPcg/pyOIp0rZTwOlfBd79cff7imyZgFTIYvuuEDVA7jyCTtL9dBYMHRoqKFvGM22YKHd6s6J47ok6m9xZQFXEvXECtQ+1DnciHT0VMkbIvagtE3e3A/y2TDzlJ/egxqIeVO2xZTTl06nZIFuGNroonnss4V4vHehkmiRV7lXw3LW2TBHlruYEhJ2bDg65hyn3jL8u+latVE/MKsNzD7I2KUQ8+Nry0ZYQ4VZUmEgJJfeA86CPwNMpdzpngd7X9/4XcPgZ3rLr4EmFDFh+QFlUQbaM8dwDwC869Rh1w3Ad4atsGTqEpevCaHNZNRXtqA8Csy4HYjG5HffcHZKyf6sqvmp8iRKUeyzhpjAWncTEsmW4LRNPukEkVdkDbZnx8m8xW4b/PlFnp5JqrhttdGGeu9ouplFInmOxziJRReUeT5FUyLBrZQc/RVzWh1RT6Z77oacAUz4MHHaqfM/JyVHu7JrSaxyLwzfpyjNqKyfPnVuhmk5Dt636PugeiCKdb6gtE3AedPkB3fWnGUa8XtH7GmSdaD13Su45o9zLBr/hXCnwC6cjfD7hA4DnyUJ0H5ygKSadDpzzI7dcPM+ddwzUxgH0tkyQco8n3GUDIi8/QJQ7r5RKuavRQCC565S7jtxZY1P7p40kUe/fNkqeu3Mdi6TGqd/QRlfNbBmHBDSkwX35VBnKvWUc8Mm73Q6VH0ctPxCm3GMJ0hlpPOEo8QJfmZP6bXRBSF3b4XVVfa4bVXv2FUJXQedB89x1thgldxqbUZ85x4+SCqkRHRZV7poUS8B47oHgFcWxZYSsDLwxh9ky9OarVfPUb/jxivm9ypahqZA0Rx5wydZR8KkAW0an3JNEuRcJqKoyN40BJs6WSpDbMiofXFkBQY1l/Cxg/AnA2Bn+/QOEsG3C4evt6IJ99LoHBcHpd7rsGcBVwZ4Fxuq9pFaxcif59R6SZ2mK3Jef/EE3m4UilLCIbQeUqdw15fVZCazsnjIETATUHc9H7kxIURKnUHVOxINHMsXmNASSO81z13XCRDBwcvYo9yDPPYIto5R70EqmZvmBAAQFVJ2KpLFlgiYxcVsm1HOPQu7clmGVxyF1otzVcrrJBns53yByTxDPPeIM1UQKuOwR+bqHrMNBbRk1GgjaX8tY4D/ms/2TBpm0nzCvGk2yUc4AdmwfSu6NchYpX4AtsPzcltGM2jLdrLNIe22DqgRU2fGFkGWjedbONvbx/uVr+v2F+s9cBJD6KdSa7JqHWHNyd0YRJPZAy6nWd/cXTn+9gshdsI4qlvAey2mTqv7bdbxuqFx7P6zzLTo/IqDe0Dx3tY2Iu+v1J4kY4SMyfh110GXLaJcfEMHrIRnPPQDq4jqz9NRiVgHkziscEGDLBKRC0oh6GLTkrn6rFJlqtHXuX/5MykS9ngDiSWDCicDoY2ybhfnAgHttgmwdWlZlmyi7pdhwncIzzGfKPZ6A52nxntmRjd7f0N959s8994R+20Sddzu17wRRVJFsmRAlS1MhqWIOylgpVk/COpsEqyf0nsRTZKIQV+7M5+YWESckXgZ6D/ksbP57ejyfkGJkzT33oYfJdWHGn2B/Hgu+HsWyeoKCpdSWSTcDh0xzjwcQMZj0iwae6aNDsWwZlQqZrA+xdowto4e6EWpop4Y+geSe9F9knS1DHz4cNc/dU66QgCr1YQG30aYayVN6CPEHKffJ7weuesEbqKSV3OnoiqQqam2ZIucXtC91fKqyk3Xu/oVwt3diDsUCqixbhnewDqk3eLdT51HMluGdZ9i5e7JlKLmzcodNdqMIyoQC3I5aa1+lXC+XdyDcc+dkxeszP39ndcmgSUNMUNEZwJ7z4OTO2mTdEOCLS2SsSu0vyKYqZ/JbIu21ZWJx4HPPAsf8K9mm3vXzfZ57BFtGm+fOA6r9wfaqyqAbBNQAudsXTJGS0xPHvX/DhuYZtg6Hghpm6ypolMk4HnIX8OXIc8+dBlwoURXLQqDvud/My6/7PbVligVUddAF6KgVMOJIYNRUcjzeuUVNhUzr33NP2tPB0eUHEvpRkG8EELASIgBtnjv9jc/fLkbumnvjBPlUJ9gkU1BHHOEtj5ocE2bL0Cd56RQ2V9cAGVEF1HG1vcr+CPTcA8idt4MoMZGo5M7vCV0V0ikHeT1ysnx8nqc8qi1FCajGXDsqKM892x8+X2WQUAPkbt8AOqEH8FfkBGkw/IKqVSG5J6aUUdRUSF4u5dsr35N3DHy4TQMuSY1yp56mbwisUe6pBv22vnOitkyRgKoOnrxprtwTwOVPAXOuJcdTnVuJyp0OoVW56X6cBk49/DSxZQI8d34vtSqQkAcnS/o9V73F6gn3qVWZ6d9YHPjKamDGp7xlViPOUFtGM9KglpzOquIjSg5af0XM39Y8+w5R7pwMY2EB1SLX0Rkx0klbKWmvKlvG+ZyU6eTPA//5ivcYpXjugL8+cltGxaBiMfgsv0EKpgK1QO7q4jSPlZVNPU+RVyQ69ZpXZqWufc+B1CzUH5YKSUFtGdXAeCVIsUAZzYP1KHdFboT8fT4p82fVaxHTD3WpPRJPAcMnyfdDD/XuLwr4bFf6e2cITyq1Ov/mQ+Qx1ZN0go4bY8N/X0opGwHRuQyJem+j00644spXUwZ6PrpUTOf6M3FR1JZhcRhA30kJFtyMJ6Mp91jCr2r5fvg1oY/r04HaF3Fie/kCqixvnQdUeXsQus7XrjfF2hsfMarX6olUQWmNYaPyoA6Bg2/vWLdqKeLe4FH0IKVBAhWSuxBiqBDiPiHEGiHEaiHEKUKI4UKIfwoh3rD/ahYuqSJURWsYAXx5JXDsv8n3PnInSlLXWyYb/I1E93TyUpR7bkAuY+CQO+sYeECVKneP585mmMYSfp9ON1syaCjoO5eknI331XXA0In2Z5XaMnX+7/hxW8bJY6oVN3n5+f5jMVkungrJ7S06vE/WeUlNWx6+Vozm3tLz4Z0M/T7FiLFoQFWT1ulcw5R+W2EHHh3lHkbuuoAqIzQ+MlT1MKiDp/aKZ2TEiYsrdxZQ9dkyGs+dzgEJA6936jdOBxhA6LRD4teHL1QXBJ/NxMm9O7g9HMDK/VYAT1iWNRXAdACrAVwLYJ5lWZMBzLPfDx5oBWkY7h3i0b+KQHUeIyAj6fxzVTE86kOj2rTlYrZMPAVfIJAHAD2eO5ng45xDSICU71PtIxK5p2Rn0TCcDG/LJHeu3IPWIQHkeTUM13eegfuv09gyuIZD7gAAIABJREFU7Dp6lHsYuQt4YiGJECKh6j/Mc+d+eTHlLlhMSJVZVw5KjiJOiKtEW4Zfbz4/oBTlzq+vp7xFPHdO8jrbTOel68DrnXqd0wSdg4iedzZRAqpAsC2jyjTQFaLcD0ByF0IMAXA6gN8BgGVZGcuy9gL4KIA77c3uBHBupYUMBVdb3P/TBeN0PXe6mQyRbFWse1JK2MJhvFzUlqFPqnECZSHKnfrIjgoN8dCDsmWieIWeh35rFFAxhHnuumEnH74KSlrEftCpHXo91D11PGKN9ZaoY/c+7t+XYAJA17F5PPeAbBnd7NWotgwnJUCj3JXCtu0O3dOOeLlUvId+zrNluADi15ODniPN1NJmy+hsmQD7QzeJiU7wC4Nubf1EOtxa5WXm7TOR0v+GwzcC0Sh3nugRZb8VohLlPgnyyZt/EEK8JoT4rRCiEcAYy7K229vsADAmcA/VAPcsY0HkTlLzdFPgqXJXJJrVZcuoGxdVuWf9tkyQ4qSeO/WReUBRS5gaW6ZhhP6pMvQ3sYR3KJxuASC8TzAqBto5qICsyr4JG2XwexTYITNC5p4399rp6Ixuzzt2dW35M1qD0urUPlLNkNeoxfu95x5HDKjGWKaF53wCyF0FHh3i4so9iNx12TJJfxtJRrRlYgk5x8KZw1AquYdky/ClKYpmywQod93oJlC58445Qp47/Y536Oo+Znq89YfuexCVeyXdRgLA8QC+aFnWS0KIW8EsGMuyLCGEpfuxEOIKAFcAwKGHHlp+Kbhy9wVtWMXltkwiLbNlUk1eEs326P26yJ57Us4eLOTtoXzaf2N5Cl9KF1AlSjUVZsuwfQLA7GuAU74QXEbdAy+aRgGffVI+ACIq6PU89jzguPOB9tV2uUJsFodsYt7PPfesI0S5s2wZpxMlhJWsgycVkncU+SyxJbjXLeA80Yh2II0j/NdILYzmO7eoyp1NUAI0tgwh91gsRLlT8tIsHObz3Nn5R81zj6eAc3/hjji56vbZMsxz19oyKr7UKLNMgjo6Dm6LAfLa6zrAoICqL89d0+51iCflb1QczOe597idDxV4+YHi9aMCVKLctwDYYlnWS/b7+yDJvlUIMRYA7L9tuh9blnW7ZVmzLMuaNWrUqPJLwXtZ7rU7Q04abNOopHSL+7ki1lyY5x6hsjm2TFxWVu7HOqmA9vEouStVmGokRMUmaFGoDoIq9eZDgDHHBpdRlxYKAIe+Rz/jLwhcDR92ir8Be47LhvGUtOhf3aSbdDPpFBvcz9TvkvVeOyrIcxdxu6Mn2UROXEZDFNza4Nco3STvj89yqMBz51aEshCVfZEL8ty5cg+wLtVrPjJMlmDLjJzsrvHvXFsyGqHXW5FfoC1D1oJK8fTWEj13da+1Ak1jy9JtnPIIrzAIAhdJ/PkJmW6NcteMoqqMsvdsWdYOIcRmIcQUy7LWApgLYJX971IAN9p/H6xKSYPg9JL2xVOebZgtoxuKpZv9HYFjy+g89wjZMlZBZszEEsCHf+DvGHQzVBVmXAyMOU4GHPds8JZLZ8vUDwM++Vf5PNTFv/eee2AZNcq9HHg6P5XRoUgrgi0jAhSdznM/+xb382mfkCsm7lju7ufjd8q0zjUP2/sgyw/EWb1QdYEHFCkJZm31Hpb9AwDv/TIw7QLgWbIqKP0bBJ3nzjsZBbUWOh+BFCP3YguH+ZR7o3f7oDLza0EtlWwPPAFSnUL25bmTe0EfWQkUt0G5pabiEmrGd6RUSFUedn3yA+FtKZ5gv2HK3SqQ+sM680FMhax0z18EcJcQIgXgLQCfgRwN3CuEuBzARgCfqPAY4QhanjOMKGjg1CF3ZssA+klMjucewZYB5LAwlmBDeLuiKsWpSJ567g0jgCkf0pyDQOBQbsqHgF1vkrIWub06W6YcqA5VBY/psbUWUoB1Fui5k/MYR1ajrBsCTP2wawHFEsCk2d7fcFuGdiROzIGNFDxpswkZN9FNXKIYNlH+W/Qz73ZRUyEpkSfrvZODPNvb5aUWSKgtQz13HvgU3n05nrtmKWbd/nn5qDjK9ujbIX3NFTztDHzLYRcZAfE8d555E+i5azpJzygqBeQS4UsE8HbEA/2A22H7ZswfmJ47LMtaCmCW5qu5ley3JGgnHOjIXVVwrt7s19qAaq93H/R1FOUOyAkM/AYee57cz8TZwFk3yeVgAa8tE7QOdpCV4mxLKqtu9qOnjEX2VQoUuTvkyf56jsvjI8WUe8CsRXps+pfvwxNQJeXiyl03tI8nJbnzgH1gWVhHUUyZOY2d7PeEzwCT5gQs2pXwT/YJVe4hyw/w90ligcSSwQJGl2VFz4Vmdeke0MGP75nExOZ0BKWFcvjWNEqwa6QRaLxcXHSo4xa753wEfMg04IPfl2VarUaQbOQXNZuqAhz8M1SdHGUa2Y7DRy66CS6xhLv0Z7qZeOH2tk4qJO3dNZF0bbnsm53t9ZNT40hg1mdk4z35c65id8jdXoveOR9K7ilvheSg51ZsQSIVCKoGuArn6214jsuGpEFxkmJWSNCx6WtPKiTt9JXnTuoKXx9G1RXlz9OyB5aFbVdse8GODci1TqZ9XL+9IkxaP4pNYorz82LkrLve8VRwHQ+yFHgnGWfXm56DZz+abCY+MS2qcvf490HKnXxOR0C6OEmiSHsD4FkGGpDnespVXrHm89w1FlmVMXh73lfQNSKtLUMbOKlMyldPNbsNhnrunCSd/UVU7tne4GcncqTY1HXnmIr0kt4GoEOYHeLbtkq2DKAh6DBbhncEQco9QjDL8zuN9x8UUA313OnQPu79XVElzv3kqLYM2S5sxKXKREmJ1y/eyQU9iYlPJqIK//3fkUtK66BTuHQ/1III89x9RGcHVOMkd163rIAOfAJbWFzCKTcTUaOOlrGTw+eQ36WL33O6UigFvY++B81EDLhXgIOf3HV552o4rV4D7OYrMom56jzdLAMnAMmW6fdX4MipkITc6fNGw+AsVxxA7vFEBFtG05gCy5ioXuXyWSwhAVWfckzo//KHcwQeO2To71l+gJENz/NPcvVHrJuonWapyowTa7HfOLYMCVzzuQzqIez5jH2e3JaxF7DyKXeyMNtJnw4pQ5DnzlQ370z5djpbRihyT3r3VTRbhow6dA/s1qU18hF1PAG87wbvZ4lUhHseIJLoOftsmQPccz8goCNb7qsDXjVGiV8p93Qz0F+Qr7lyp4i8/IC9XaY3OoHG4vYaN/yYpELQkYcOSi0U86kBucpgtqf4dlEQRNA6oorsuWsmMemgSyujHcRhp8rso1FTgJ6d8nNBFLna9pBpwPSL5IOpn/+J9/uoKbDcvolqy8SZrRgE1UGp39UN0dtvlNx5QBXwigQ+Q7fo7Otinjt9AIau4yUjUc/+7GsdJ4TKO9wgJNhowee5swwiXqYgxNPFr8eMi4C+3f7PPXMqAmyZAzhbZv+Dp0IC3iGZTgXSm9vfKV+nm92HU9MZqvzil7L8gNpHFKJVSDW5cQB6PqrsdOShQykVN8jXLQecKEJTIZlyClL9kT33AHWoyKVptJxsA7gqXXXy1OJItwDn/RLYusTdB/fli9oyJZI7H6YDwcveOudFylMfMCqk94MvIezsh49uSyR3nwjRBVR1lhkjdbVCqTovqtx1M0914O07LOjM62oYaKpoEI77N/3nRrlXCF0jOu58YNgk+TrGVAkfKqqHYKebgB6mPHL9/ko15t3AEWfKHPQwqN9le6IRrUKq0R1NKFCPtJq2TDURSNRhAVXVyIJmqEb13DXD7FjCv4QzP8aUD0vFtWVxwDkkvP+CzkdXlqjZELpUyFBbJi6vl/Pg8SByT7nLPY87HjhirpxwRI/BPfdRU+V2444vUuYg5a5sGTIfI4ot45Q3LlcIbRzptoHIM1Rp+yaxEmf/mgyZKG0kii0TBF26qq/zN+QeDN1w+cxvke81qkSnJtItpHIS5c6fWN40CrjkH8XL5alMJdzAdJP/YcWegGoRW2a/kXuA+g5bB6eYlRNZuQcM/cOe6hRLACdeLl/ffZH3O5rOycm9KFmX2Hh1+w161Jzano5MA5U7yfIYMh645H62n7i/U6wf6t9Ou++AjotnywR57jpbR42i3v0x+e/xa737KsVz56Mb/nvnvCMkC0axZYLgsWV4nntAB1lFHPzkfsi7pVc6NGB9GkeVHC3V9qgp+gqnS4UsZMu/+DwdLSpSTcBAN/usGTj0VGDcTKBrB9AcshabruPaF+BEIcKUOw+oBmTYVOq5J8KUO1X5LE5By8MDqpGVeESPntpXQvOkHl35qZUUqNyTCO0UaRCQ37NiCJzEpDpl4rnzTCh6PI9VwuwPJQpaxst6X2yto0Q9MOlfgPHHA0tsW+aQaTIm0TRGTgrk+44igCaeBnQcVnw7HaJ47oPYTg9+ch89VT70NgjqYraMBT7/vHzdbS93w9PJ+LASKP/i6wI4UUDL4ewrAXz2cfn68H8J/z1fhGtfoZgKpwhcW4YRb6Wee9hTnTyTvVg5PMqdDfGjTGgBSlDuhFhFvPjEM7WdKk8U5a49LrFldAQcWuYgW4alEjv5+GTNfPo7Ps1f55HXtQBXLIxQphhw6UPkuAl3FBBU/iid2WlfKr5NYJkieO7GlqkAYWly9LNUo7stJfdyL3655D5uhncZgnJAlea+gk+xRwio8sBW2Z67Ro2PPkY/vyBMSeqUu1LAo6YAI6fofXxdWZpGA0MOlb8ptv3oY+0RZQRyd7Jl7O3qAx50FiXw7ktFrVC5j5wCjDyKLOTGYhf02IC3cxg7zfsQdd3EtKjgk7yCyj/YbcTjuTNyT5iAauUIC+jQz+gzRT3KvcxLFLSWRTHQeEG52B/k7vPRQ9RgEKmU7blr7uf7rg/fljY8nuFD00nVtTzmX+W/YlDnlm4Bvry8+PZCAFctkq8fujoCuSckcakVIcMCqmHXjc5xKJXcg4hXXaNFt9nHYCmO9Bzo9wDwybv95aPHKgXF6n8pnnslCPXcBz8V8uBffqAYtB4r+ezI97uft4yX3w2bSLYt05aphrVTLmjAbV8ek874K2lVSOG1GtTfYRPl6+ZDIhwb0c5Z29kH2UPEc4+KUv1rXrZi5zD0XXJEMNAl34fZMkVTKtV5lmjlFcsE0l5HarlEiF9U4knHEkXOPeZfnmAwEMlzN8q9fOiGYPSzi+5188pHHgl8Y5tXPZV78VvGy/1Yhf1jkewPz13bgYYFVBnBcltk7HR5P4o+9aqEYbZ21BZiy8TypREMJ8xSEIsVV+7n/152hr+3F5srO6CqU+4lkntQ29ClxUatG842ldgyEUauNNg7WNDZMlz0mIXDKkDjKBkx1+URK2/Os1BQ2tvzl0uSiRQwZIK9j8G7gVrsL89dp4Z1w86mMfJ+0MfUeZQk+RvlQd2lkJMuoMqVK7VpmsbIOhQVpUyQ4dA9Q9S3f7sTjaLcwzqlptHy3GhZo9aZdLPMTmkaHXBsTafhqRsRiK0SX5w+9CNs/4Ou3Mn+gx6zZ5R7BZj5KWDqOV6S4TYAhxCSmPdurKxnHTYR2Ltp3xNt2LkNFrgSClNnU88B/ut1bzBQZ8tEPYeSbJmwbBnN33N+7J8xXK2y6MoWtVNQM6vL9dw/8UdNllBErZduBr60TE420qGYLRM2wY3vo5z2F8Xe2hfWpfHcBxnxpJx4xFHs5g5nM1zLgfLu3ymeO23AqSZJFrpsjljM76PHdOQe8RzUw7yjPNQ7zHP3BVQTMnOppIeFawK2UUEXBCuGYsq9flh4ueuGuFlZpXamgJxrEVRWTsw+zz2Ccm8YLu9D1BVVKeqHFr9nxbKJqoFQ5W4mMQ0eilkXDjFXqNwB+ai9fYn9ZsuQxtI8BrjyWWD00SX8npFMVIIcPkkeq9iSEHTfWs+ddSrl+r10HyX9NkIqpELGJvcg5f7+77oPmyl63CrPjfBdxwDPPYzcp5wt72nYhL0gfPQXEbKO9oXnrq5r0l+nij3Zqwp455J7PCK583VeSoFa36Zza/n7KAf7I6CqU0KHRCBbhVSj+/Sdcsh17LRo22mzpzSB1FKPr8AfD1cKSsngGHMc0LrCv9yvQuMIACP033FU0iGF7s8mrlST+3B3wL1GfGkPiniitPpD0TK2+DbF2n81wCfjARrlPngdzDuX3Isqd0XMW8o/xlB72nLH5vL3UQ72i3Kv8Jif+JMb4KuEXItBl6rIFy6rJJg+9Ry59pAKppdatqiN/dMPAXveLv60rUjHrfL15vv7t9u9NsmUs+U1CloyZF9gn3juTKUDfs/d2DKDgFgyfOimlHtHBap7mE3u6RI822ogkY6WZVLtY1byVCf64OtqK0mKkmaolhGSSqTkqqHloFh+NkXjCFudVwE8oFwpuDrlCrySa1QtlDp/oRzwB48D5NqY5QcGD1E991IyJTgaRwIX/BmYcFL5+ygHZ98iZ0juS5z2ZWDaBdXZVyxhL2tbBVWq2zf9C2hmqFaYBlsu9keWE1B95c6fjXsgIl5E3FUD6nomw2wZQ+7VR7F10YOyEErF0R+pzn5KwaEn7/tjjjxS/qsG4onBq/Shnrv6bn8tvhYvb7RQ8XHZrOKK9zeItlq1QB8IMlgI9dzNk5gGDx/4LtAyLnybj9/h+uYG+w4zL/EuIlVNRMlzV5/tc+UeG/wMDh0GzXPfx5P3SsEZ3ywv6F0KHHLXTKA0k5gGEVEU9bHnDX45DPwYOdn71KBqQjeBLWjl0MEetnPsjywnYBCzZQ5gepn8vsE/htZz33fLDxzAV9/AYJDA4y26h4qf+S1g0ux9W65SJjFVE0edBfTtCV4+uFSMnQ6853P7xx48kKDLlpl6jnxw+aGnDPo1MuRu8M4Dn+avS4887ep9WyZVjv1hy4w4ojpLTSsk64EP3VS9/R2s0Hnuo44C5tiPEBzka2TI3eCdh5OuAI44w31/xJnAng3lTXWvJqZfuH/I3WBwIDSe+z6EIXeDdx7e/x3v+7HTgY/cun/KQjHrs/u7BAbVhHrEIFXu+/Lw++WoBgYGBu8ExOL7TbkbcjcwMDAYLMQSRrkbGBgY1BwOOw0Yd/x+ObTx3A0MDAwGC5fcv98ObZS7gYGBQQ2iYnIXQsSFEK8JIR6x308SQrwkhFgvhLhHCFHBUoEGBgYGBuWgGsr9SwBWk/c3AfixZVlHAtgD4PIqHMPAwMDAoARURO5CiAkAzgbwW/u9AHAmgPvsTe4EcG4lxzAwMDAwKB2VKvefAPg/AAr2+xEA9lqWlbPfbwEwvsJjGBgYGBiUiLLJXQhxDoA2y7KWlPn7K4QQi4UQi9vb28sthoGBgYGBBpUo99MA/KsQYgOAv0LaMbcCGCqEUCmWEwBon1NnWdbtlmXNsixr1qhRoyoohoGBgYEBR9nkblnW/7Usa4JlWRMBXAhgvmVZFwNYAOBj9maXAniw4lIaGBgYGJSEwchz/zqArwgh1kN68L8bhGMYGBgYGISgKjNULctaCGCh/fotAPv4idAGBgYGBhRmhqqBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ3CkLuBgYFBDcKQu4GBgUENwpC7gYGBQQ2ibHIXQrxLCLFACLFKCLFSCPEl+/PhQoh/CiHesP8Oq15xDQwMDAyioBLlngNwjWVZxwA4GcAXhBDHALgWwDzLsiYDmGe/NzAwMDDYhyib3C3L2m5Z1qv26y4AqwGMB/BRAHfam90J4NxKC2lgYGBgUBqq4rkLISYCmAngJQBjLMvabn+1A8CYgN9cIYRYLIRY3N7eXo1iGBgYGBjYqJjchRBNAP4O4L8sy+qk31mWZQGwdL+zLOt2y7JmWZY1a9SoUZUWw8DAwMCAoCJyF0IkIYn9Lsuy7rc/bhVCjLW/HwugrbIiGhgYGBiUikqyZQSA3wFYbVnWj8hXDwG41H59KYAHyy+egYGBgUE5SFTw29MAXAJguRBiqf3ZNwDcCOBeIcTlADYC+ERlRTQwMDAwKBVlk7tlWc8BEAFfzy13vwYGBgYGlcPMUDUwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjcwMDCoQRhyNzAwMKhBGHI3MDAwqEEYcjfwIF+w9ncRagIdfdn9XQSDdzhqltx3dPRj8+7eotts29sHAOjsz+KulzbCsqpPbv94bQuWb+nA+rYuLFjbVnT7bL6Ajr4segZy+PmC9bj/1S3I5Ar42+LNWLWtE48v3447nn87dB9LN+/Fojd3Ou8LBQsrtnbAsiys3t6Jzn4/+bzZ3o2jr3sCK7Z2oFCE5DO5Ar5y71IsLHI+97yyybkPHX1ZtHX2AwB2dQ/gK/cuRUevngQzuQJWbO1ANl/AD55Yg7bOfizdvBdtnf14fPl23PLUWmTzBWdfADCQy4fev/5sXvuZ+n0QnlixHd99ZJXv875MHnc8/zaefaMdgOwY9/ZmsGpbJ2b+v6ewdPNezL1lIX73nLxXhYKFgZy/DMWgOtwr/rgYdy7agGy+4DmXqB1y1Lp97+LNaO8awIK1bXhlw+7A7bbt7dNe07Bz7MvksWZHp/a7VzbsxstvBx8vCOW22XsXb8YtT60FAKcuVYLtHX2495XN2o79jdYuLNu8t+JjlIL4DTfcsE8PqMPtt99+wxVXXFHxfizLwvm/XISCBdzy1FrcsWgDLjn5MHT2ZfGHRW/j+EOHISYE3mzvRkMqjs//+VU8tGwbLjzxUNz90iZc9+BKvP+YMVjf3o3RLWkkYm7fd+/izbjm3mU4d+Z4pBLy82y+gJueWIN/vLoVf391C158axfmHj3GU6ZcvoDzfrEIO7sG8PfXtuLXT7+F3kwewxpSeN+Pnsb7jzkEF/3mRQypT2LKIc0AgFvnvYGv3/c6RjWn8Z2HV+HJla04bEQjrr1/Obr6s5i/tg1/W7IF5x8/Hm+2d2PuLU/jrfYenD55FP7zL6+iYFn4+YL1eHDpNpx6xEj86J/r8Mjr23DdQytx9NhmfPaOxXjmjZ04b+Z4/OO1rbjlqXU47ciRWLR+F55YuQOHj2rEl+9dhu0d/Zg9eRQyuQKeWrkD89a0YfywejTXJfGrp9/E7557Gy+9vRsrtnbgtc17MXvyKACSMO9YtAFjh9bhwttfAgAkYjF88vYXcddLm3DhiYdi3po23DrvDUw5pAnPrGvH0IYUbn/mLdz/2ha898iRuG/JZlz5pyU4YlQTvvvIary9sxc3P7kW7d0ZPLVqBx5ath3r27oxojGNs259Bu+dPBLn/Ox5jG6uw+KNu7FhVw+mHtKCN9u7sXZHF3IFC6feOA+HDm/A1LEtuO7BFVjb2oV/rmrFDQ+twuXvnYTWzgE0puP484sbMXZoHR5dvh07uzP4y0ub8MBrW3HF6UcgJgSWbt6LMc11+MjPnsPfX92KB5duxWEjGvHCW7tw5Z+WYPzQejy9biea0gnMW9OG1zbuwUXvORQ/fHIdvvfoanzypHfh6bXtuOquVzG0IYmjxjQ79WUgl0d/tuDUsfVt3Tj9BwvwruENuG3BemRyBSzbvBe/WPgmPnnSoVi2eS/m3LwQZ0wZja6BHP70wkZ8//E1aO3sx8mHj0B/No/27gF09udw8vfn4Y3WLrxn0gjUp+J44LWt+OsrmzHjXUPR0ZfFdx5aifHD6vGZP7yCxnQc//f+5fjb4i341+njkLcsrN7ehZb6JH7yv+sw5ZBmfODHz6A3k4cA8NTKHThsRANe3bgXH7r1Wfzb8RPw15c3obkuiRFNafzkf9dh/po2LN28F9fcuwyXnTYR6UQcALB8SwfqkrI9zl/Tiovecxi6+nNIxWP439VtmDiiEV+8+zW0dvTj6LEt6OrPYV1rF1bv6MQbrV248PYXMbQhhWPHDUFbVz+EAB5etg2PL9+OU44YiVy+gEeWb8e4oXVIJ+Lo7M9CQOAb/1iOp1a2YmRzGhf/9iW875gxGN6Ywi+ffhOjmtJ4ZcMetHb2Y+2OLvxy4ZsY2ZzG5XcsRjoZx9Fjm5ErWLjx8dVo6xpAOhnDJ371Iv6xdCvueWUTzj9+AlZs7cCIxjSS8Rg+9+cluG3Berz3yJEoWMB/P7IaJxw2DO/70dMY2ZTC1ENayuK873znO9tvuOGG23XfHfTkvrsng/qUrCTr27rxgyfXYn1bN9bs6EJnfw7jh9Zj6ea9uPHxNTj58OH470dX47oHV8KChadWtWLb3j5ccfrhuG/JFqzY1okRTSl8/e/LMbo5jenvGgpAdhrX3LsMa1u7YAGYMqYZp/9gAf76ymbMX9OGHZ392LSrF4s37kHPQA7ffnAFWjsH8J7Dh2PDzh7csWgD8paF9q4B9GXzWLJxD4Y0JPH8+l0QAOatacPa1i4cMaoJnf1Z/OmFjXijrRsDuQK2d/QjJoCegRw27OqFAPB2ew8GcgUAAju7B/D0up1Yvb0TlmXhr69sRi5fwLItHWjvGsBANo97XtmMNTu6AEj1/GZ7D1r9xt9eAAAXS0lEQVQ7+5EtFDB/TRueW78TC9a0oT4Vx9LNe9E1kMPaHV1YsnEP6pJx3PLUOtz+7Ft4bv1O3P3yJrz3yJH46t+W4agxzXh7Zw/W7OjCm+3dmDy6CTc+vgYWgG8+sAJ92TyWb+1AfTKOJ1Zuh2UB7d3yGuzpzeDVTXv/f3tnHh1Xdef5z61VKtWu0q6SZMmSLFmyVtvybrxjNttsNk2ATDhAhiVpOskQejLkdJYOc9KZCUmG7iZNDj2TBrqBBLMZsOO47UDA+yLLlo0tW7L2fVepqu788Z6eJcsy2NgIVd7nnDr16r1b9/6+93fv791736t6dA8EeXF3LcGw5JW9dRys7eJIfTc9g0GONnTTHwhxpq2fU619hKSke2CYM239WM0Gqhp68NjM7D3bSVP3EMeberBHmfi3j8+yp6YDCXzthT28uq8Oj83MB5+08efTbawvSeHbrxykprWPhq5Batr6cdvM3PP8xziizHz/jaNEm438fNsJTjb3cqatn+7BINflxvGTd47xgzerMBkEbxxq4Nurc+kdDLL9eIs6Ku2htTdAS+8QTd1D9AwGCYTCmI0G3q1spKatnyPnuvjlH07SMxRk88EGiv1uXt5TS0dfgH/98Az/e2s1Nxen8MreOl7eXUtVQw8nmntp7wswMByiuUfRev+iTDYfOMfOE61UN/Xws/eq+eBUK31DQaoaevB7otnwfz7g+V01JDitbDvWTHVTD+9VNrEiP4H/8foRtlY18/7RJqLMRp7d8QkdfQFONvcCUNehzGpf3lPL8386zb99dJbdNe28fqCeTtV/UsLWqiZe23+OrVVNmI0GPjrdjtVk4H+9f4I3DtWzNDeOH79Vxe6adgaGQ9R1DLA4O44PPmmlpWeITc/9mZaeIXadbKWzXwm8j720n/TYGB76f3txR5v59c7T7Khu4dkdn/Dsjk94aXctrx+o541DDYTCki1HGilMcXH/C3s429bPlspG3j/axENLsthypJHHXtzPa/vqWDYjntue/ZCatj52HG9hOCzZe6aD7sEgu2vaKU338PBv9wPw7B9Psu9sJ5+09PL24UbePtRAfdcA71U28fHpdl7dV8fmgw2cbe/nVEsvx5t6ePL6GWypbMJnt/CNlw9gt5oo9rt5anMlQ8EwfzrZilEIntt1GqtJOXndVppKZpz9iuLfpYK7uBbLEJdLeXm53LNnz2V/71fbT/LMthPs/d5K3qtsVEYfb5yfPsc7rMRYTcxIdPDOkUZW5CWoDVAQ74jinLok8+rX5/ODN49yoLaTZFcU9V2D3FKczM83lvDavjoO1nbywodniHNY6eof5turc/nR21UkOqO4d34GX1+aRX8gyKKnt9PWFyDOYaWlZ4hfbCpBAo+9uF+zaWluHH883kJsjIW2vgCuaPOYadz0eDt1Hf0MDocRAor9boZDYSrruxntKrvVBMD8rFiqGrsJBMP0DgbpC4SINhsZUKfLMRYj0xMc/N3NM3nyd4eprFemxDMSHfQOBWlXbWjoGsQbY6G9L6CVUZji4vC5LowGwU82FJKf7OSGZ3aR6ommrmOArY8v5s1DDRyt7+a9o01kxNqoaesnL8lJVUM3dquJ3qEgdquJvkCQv16RQ0PXIP+xp5aCFBcHRk1THVEmegaDpHlt1HX0k+qxcba9H4MAs9HAcCiMM9pMp7qMs2mOnxc/rsVnt9Dae95mj81Mh5rGbjXhiTFT2z6Az26hbyjEYDDEqvwE3q1sAkAIkBJS3NGc6xzAZBAEw5L0WBtn2vqxGA0E1Cl7kd/NwdpOjAaBzWKkZzDI9m8t5f2jjfz47WOahgspS/dwurWP9r6Alv+KvHh+ensR83/yB9YUJPL7/efIjnfQ2jtEW1+A28tS+Y+9dWNsvJCXH6jguZ2n2FqlLI15Yyy88ehCdla38MRrh4lzWBkaDtE9GCTVE01r7xC/uW8O97+wm3lZsWw71kyyS9FdlOriYF0XBgFheb7MJ9fOoL5zkOFQmP1nOznaoLSfER0Wk+KbkXxG6s1nt9LaO4TVZGB2hpddJ1vH2D4nw8vHo5Z8RsoFcNsUP5ele9h7poNMXwynWvvYUJJCoiuKOIcVV7SZ/kCIbVVN/HB9ITf/YhfOaDOnW/vw2JQ+FZbw5qMLeWVvHS/tPks4DEV+F7trOjT7RyhIcXLkXDdLcuLYUd2i9QUhINpspD+g9Kef3VFEfyDET987TrTZSLzDyiF1hD53mpef3VlEwVPvavFlaW4c31qVy42/2MWibB87T7Ti90ZT2z5AvMNKc88QHz25nARn1HgHfwaEEHullOUXOzal19yL/W6GgmG+9/sjPP7vB3l6yzEt6MU5rDy+MofTrX1sO6Y0/q1VTRgErCtO0QI7wP6zHVQ3KSPb+q5BdV8nwVCYH7x5lBc+PIPZKPjVXaUEQmGe2XYCZ5SJPz2xjK8vzQLAZjHxnTW5zEp18dajC/HYzGw/1syxhrHrixtn+xEC2tQg2jUwjN1qIjveTpIripPNvQwOK8FESpiZ7CQ/yTmuc99R7qd3KMj2483kJzmZn+WjT22AA6PWQfsCIcrTPRT53cxKVWYibpuZO8r91HUM0B8Icf+iTIAxgd1uNfH7hxfwm6/O5rf3z+X2cj8zk11UZHqp6xig2O9meryDb67I4b9dPwOAmjZlbb1K1dw7FNTepYSSNDfrS1IIhuWYwA5oQfHBJZmEJZxV1+nDEopS3bz12CKe2Viipb9rTjrAmMAOaIF9pNy/WZmL3WqitTdASZqbYr9bC+wjdQxo7WGkw59RtQRGrcUerO0kPdamLIEMBvHZLWTE2ihL947RMJoEp5VNc9K0uv35xhJ+uK6Af/pKOW6bhdI0D5sP1BOWcLypR2sXr+6rIzMuhrsr0vgvC6aNyxfg8LkuDtR2MifDizPKxA/XFZDijmZ+lg+Alp4hHlySRZTZQF3HAHlJTuZlxbK2MImtVc1ICV9bqOR9sK5Lq+/R9bKuOIXv3zyTH60v5B/vLuP+hdNYlZ+g1VMgGEZKeGhJ5ph6a+0dwm0zs6YgcVxgB/i4ph271cScaV5uLkpm9GWDkRP43jMdAJxq7cNsFPzk1ll8Z80MvrpgGhtKU7m7Ip3ffHUOKe5oVuYncLq1D1DawEh+B+s62V/byaxUN4uyfeyu6Rjj54xYGwBP3TQTV7SZHdXK9ZMRf0kJ/YEQ371+Bk/fWsj6khTurkhn//dW8uF3l/P4qlykVPSWZ3iwmozMSHRq7WnvmQ72nVXKfGx5NgC17cqx5p4h4h3WKw7sn8aUDu6zM7w4rCZ+t/8cAIPDYRbn+Fg9M4FNs/2smpmI0SAIBMOYDAKAghQXS3KVtWEhIDbGwluHG+gPhLQ0oASXLZWNdPQPc9/8DH56exGzMzxkxcXQMxRkbmYsxlHpAe6cncbmRxYS74xiaW48f6xuobK+G2eUSUtTnuElJ15ZY7UYlerPT3ay5ZuLefmBeVq6JJfi8IJkF3lJynqcTV1+Arh3fjpCwHBIkp/kYl5WLKAE7hGizEr+I8tLs1JdgDIiXzDdp6W7LjeOmclKGdnxdi2t0SC4LjeeisxYLe2GklQAbitL1fZl+mK0ch2q1gvfhVDsKE1za/vmqzYXqXZ5bGY2lKRiNir1Gm1W9OYmOshLcjI7w4vRIPDGWChIcZLijgYgUe0cqZ5orV5zExw4okysKUikJE3RX5jqYlluPADOKBM2ixEh0PK5LjcOo0GwtjARYIx/R9KsnpnIomyl7srTvQghKEhxamvkPrsFAL9XSZ+T4GBlfgJmo8BuNbF6ZgJ3V6RreZdneAiGJaObUozFSFjChpIUfriukFX5ynWcikyvlsZhNfFuZSOtvQFuKkri4FOrWFuYpJU9Yu+6khSKVf8Xpij1vDL//HWhW0tTiY2xaHUyuh69MRbiHFYtbVqsjf9+Y772/Xy1XZqNglvLUrU2MFIXs1LdLFX7mkFAuhpIZ6jXlhZO9/HvD87TBge5CQ7Nhgu6FrmJDi3fi7G6IFHLA5SZhTPKxO7T7Ryt76Ikza3VT06CHSHAZ7fy8HXTmZcZS1mah+tUW312q6bfqpZ5Y1Eyd85OQwjFsJH3YnXABEo8AiXGgNJ+egaDvLxbmWGWpyvxAxT/KXXkmlDT52VKB3eLycDiHMUhi7J9GA2CBdN9/NNXynl8VS7eGIvWIW6cpTh2XlYsJWkeANK9NmZneNl/tlPLA85X+D+8V43FZODbq3O5pTgFIYTWQOaNCngX47oZ8bT3Bdh5ooWlufHYLEbiHFZ8dqvW2VbNVDrJzGQnRoMgLdZGboIDjzriUY65tE60bEY8BqGMBtNjY7SAnJfkYMF0H0LA3XOVEW2yK4qCZEVH0aigrnx2k5Ngx2e34IwykREbw0I12K8rSVHS+M832tGsK0nhx+sLub38fHAXQlCe7sFmMfLQEmUmc888xY4b1PqaHmfHGWXGZDRo9XzPvHRW5MXzo/WFmI2C0jQP0RYjRWqHuX6kw6rBINpipCzNQ0WmElRH9Ny3IAOTQWhl5yU7efq2WfzyrlKizEat081KcXPdjHhN37zMWGYmO5k7TTn+tYWZ7PveSh5dpoywytI9+OwWHFEmlucp31s9M0Frc3PVtmU1GZmV4sIg4Fb1pHdDYbKiO96OK9rMbWWp3FSUjMk4tsuN2FaapnT8/CSnduIdbWuSK0oLxMmuKOZmerVRaLHfowWbEX/cUe7n5qJkUtzR44LOouw4oswGchLsuGxmyjOU/vBXFYrP7ij3A0oQHp3vCPOn+zAI5QTvijZTmOLCZjFRrs5g1sxU/FaU6tIusuckOLitNJU5GV5tcLUoR9GZ4o5m2Yx4bpyVRH6yE4NA62dL1Loe8fVELMjyUZTq4rHl2eQk2CnyuylJ8/DW4QaGQ5LSNA8r8hNwRpm4uyKdxdlxLM72cXu5nxcfqMBgEKzMV+y+d146JoNg7jQvZekeUj3nT5YX4rKZyYqLIcZi1E5aI7beXKS0gcr6bm0gMFIfd872q2kv3s+uBqZPT/LlZnVBIm8dbuA7q2fgtpm1Ee8I98zLYGg4zFcXTOP1g/Usy40n2RVFsiuKmSkuHl02nS2VjQDcMCuZ7cdbuGtOGieajnK6tY8VeQnEWM9X021lqfxndYsWmCdi+Yx45mfF8uGpNioyY+noD2gj1mV58WypbOQrFem8eahBC/YAT92UT1tfAL/XRkPnILmJDgaDIWIsRhZO93G8sYcUdWS1IMvHkXPd5Ccro9jXH15AToKDd440kBlnJ9MXw7nOAdK8yogpL8nJA4szua0sFSEE98zLoG8oiMEg2FCayqG6LjbNSeNYYw+3FCdfVJfFZOCuuWnj9j+5No/G7kFK0zzaUtLzu2pYXZDI3jMdY2YKN85KZsfxFuZMi2VNgdKJf7S+UJs1rMxPoL5zgFtKUnht/7kxo5t/ua9cG/UWprrYUtnIDYVJbJqdhjPaxC//cJKKTO+YOl1bmMgfjjVTkenFY7NQ7HezKj+Bm4qSGQ5JdlS3sP14MyVpbmKsJuxWE3EOKwuyfKR7bXQPDnNraSrBsKTE78FgEPz+4QXaSRdg45w0chId3Fnup659gI2z/fx65yntRPX3G2ZdtD6L/W5sFiOLc+K4viARIQR1Hf3YLEYt/yizkQ+/uxyAQ3VdRFuMZPpiOFDbyY2zkslPHn+nxTdWZGvby2bE89zOU1RMUwYk0RYjf7NSGfwALM2NZ+eJVh5cnElhiosVeQm8+PFZyjO84/IFJRi//Y1FZPrsxDmsxKqzleV58ew7q9wZtPlgPeUZXnx2KzcUJpGX5OCRZdk8ujybHdUtvPBBDUvVWRTA8/fNBsDvtZGf5GLB9Fi2VTXz0JIsdlS3aPU4ERaTgdcfWQgoM2GTQfBuZSM7qluwmAyUpXtwRZv585PLiTYb+au56Vx42lqeF8+DizPZNDeNzDg7OQl2rCYjfYHxy22juW9+Bq29Ae3EPWeaF5NBsHG2n7CU2Cwm/nql4o//ujSLkjQ30+Pt/HrXaeZMu3gdXxWklFf9BawBjgMngSc+LX1ZWZm8UsLhsDzV0vuZ0rb1DmnbJ5t7ZFP3gJRSyo6+IXm0vkv2Dg7Lv3ujUnYNBOQnzT3yncMNsqlr4Iptk1LKgUBQhsNh2Tc0LAcCwXHHd59uk8FQ+FPz6egbkqFQWJ5o6pZn2/qklFI2dw/KV/bUjkt7uqVXNnYNyIFAULaP0vxFMzQcklJK2TM4rG1feOxihEJhGQiGZDgclscauidM1zUQkO8eaRizr613SA4Oj6/nSxEOh8fZ09kf0Gy4Us629cnQZ/DtuY7+y7b5crmUjlAoPK6ddA0o+i+3jJHvHGvovmSZl/L/hWn21LRfti0jNHcPTkof6Bkc/tQ0DZ2fL7ZIKSWwR04QV6/63TJCCCNQDawE6oDdwCYp5fhfgahc6d0yOjo6On/JfNF3y8wBTkopT0kpA8BLwC3XoBwdHR0dnQm4FsE9Bagd9blO3TcGIcQDQog9Qog9LS0t18AMHR0dnb9cJu1uGSnlP0spy6WU5XFxcZNlho6Ojk5Eci2C+znAP+pzqrpPR0dHR+cL4loE991AthBimhDCAmwENl+DcnR0dHR0JuCq3+cupQwKIR4B3gWMwPNSysqrXY6Ojo6OzsRckx8xSSnfBt6+Fnnr6Ojo6Hw6U/rvB3R0dHR0Ls6X4i9/hRAtwJkr/LoPGP+3c5FDpOuDyNeo65vafJn1pUspL3q74ZciuH8ehBB7JvqFViQQ6fog8jXq+qY2U1Wfviyjo6OjE4HowV1HR0cnAomE4H7R5wdGEJGuDyJfo65vajMl9U35NXcdHR0dnfFEwshdR0dHR+cCpnRwF0KsEUIcF0KcFEI8Mdn2XA2EEDVCiMNCiANCiD3qPq8Q4n0hxAn13TPZdn5WhBDPCyGahRBHRu27qB6h8Izqz0NCiNLJs/yzMYG+7wshzqk+PCCEWDvq2HdVfceFEKsnx+rPjhDCL4TYLoQ4KoSoFEJ8Q90fET68hL6p78OJnuLxZX+h/LXBJ0AmYAEOAvmTbddV0FUD+C7Y9z9Rn2gFPAE8Pdl2XoaexUApcOTT9ABrgXcAAVQAH022/Veo7/vAty6SNl9tp1Zgmtp+jZOt4VP0JQGl6rYD5UE8+ZHiw0vom/I+nMoj97+kh4LcArygbr8ArJtEWy4LKeV/Au0X7J5Izy3Av0qFPwNuIUTSF2PplTGBvom4BXhJSjkkpTyN8hjKOdfMuKuAlLJBSrlP3e4BqlCezxARPryEvomYMj6cysH9Mz0UZAoigfeEEHuFEA+o+xKklA3qdiNw6adzf/mZSE8k+fQRdVni+VHLaFNanxAiAygBPiICfXiBPpjiPpzKwT1SWSilLAWuBx4WQiwefVAqc8OIucUp0vSoPAtkAcVAA/APk2vO50cIYQdeBb4ppewefSwSfHgRfVPeh1M5uEfkQ0GklOfU92bgdyhTvqaRqa363jx5Fl4VJtITET6VUjZJKUNSyjDwHOen7VNSnxDCjBL4fiulfE3dHTE+vJi+SPDhVA7uEfdQECFEjBDCMbINrAKOoOi6V012L/D65Fh41ZhIz2bgHvWOiwqga9TUf8pwwRrzehQfgqJvoxDCKoSYBmQDH3/R9l0OQggB/AtQJaX82ahDEeHDifRFhA8n+4ru53mhXJmvRrli/beTbc9V0JOJciX+IFA5ogmIBbYBJ4CtgHeybb0MTS+iTGuHUdYnvzaRHpQ7LH6l+vMwUD7Z9l+hvv+r2n8IJRgkjUr/t6q+48D1k23/Z9C3EGXJ5RBwQH2tjRQfXkLflPeh/gtVHR0dnQhkKi/L6Ojo6OhMgB7cdXR0dCIQPbjr6OjoRCB6cNfR0dGJQPTgrqOjoxOB6MFdR0dHJwLRg7uOjo5OBKIHdx0dHZ0I5P8D0Xd2i4CFAZYAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rBr6SQ0vq3ZD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "21dbb7c2-63ab-4c07-ff18-769949a77a83"
      },
      "source": [
        "final_faithful_df.plot(kind='hist')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff61af30cc0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ixqo91bHrFH9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "8bfda25a-1e99-4575-d2b9-9baf643261fb"
      },
      "source": [
        "final_faithful_df.plot(x='waiting', y= 'eruptions', kind = 'scatter')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff61b567a58>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vWuzbORxrX0Z",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "9a179ca3-1c94-4058-dff6-75948de24945"
      },
      "source": [
        "final_faithful_df.plot(x='eruptions', y= 'waiting', color='red', kind = 'scatter')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ff61ad10320>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C5fdklfUrh26"
      },
      "source": [
        "my_test_scores  = pd.Series([34,57,89,99], index=['test1','test2', 'test3', 'test4'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u22evgh8tC5O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "2c45cf0f-1b98-402f-98f1-3b28f99a2504"
      },
      "source": [
        "my_test_scores"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "test1    34\n",
              "test2    57\n",
              "test3    89\n",
              "test4    99\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0rQcy5qUthuf"
      },
      "source": [
        "test_columns = ['test','score']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6dJwQysRtnZC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7c7fdb2a-4de4-4e0f-8e81-a1c01e365920"
      },
      "source": [
        "type(my_test_scores)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0alDga46t46x"
      },
      "source": [
        "test_df =  pd.DataFrame(my_test_scores)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u8mXabZXuGUW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "outputId": "bac8c5fe-dd8b-4bce-e74a-bb36926fc384"
      },
      "source": [
        "test_df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>test1</th>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test2</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test3</th>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test4</th>\n",
              "      <td>99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        0\n",
              "test1  34\n",
              "test2  57\n",
              "test3  89\n",
              "test4  99"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ylzE0S5auMUB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "8d438319-d475-45a5-b805-9db24fdafba3"
      },
      "source": [
        "test_df.columns "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RangeIndex(start=0, stop=1, step=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8hQBMrRfuVEM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "0c2c5006-60f9-43de-d795-a973f262c4c4"
      },
      "source": [
        "type(test_df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XHiojg56uqyW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "56bd6730-b84c-4768-b09c-154747a6fea9"
      },
      "source": [
        "pd.__version__"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic": {
              "type": "string"
            },
            "text/plain": [
              "'1.0.5'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B1s8_hHayPI8"
      },
      "source": [
        "new_test_df = test_df.rename(columns={0:'score'})"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TaFafsNPCXEz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "outputId": "0fcb2c12-ccb6-4717-c26b-44e4163ba40c"
      },
      "source": [
        "new_test_df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>test1</th>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test2</th>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test3</th>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>test4</th>\n",
              "      <td>99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       score\n",
              "test1     34\n",
              "test2     57\n",
              "test3     89\n",
              "test4     99"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gps4HjLbCu1X",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "f85eb000-c1c6-4ab9-f0dd-7e98ec84a4f1"
      },
      "source": [
        "new_test_df.columns"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['score'], dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "531TJ8nFCxNz"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}